/*
Metadata

Obtain and manage metadata for owners, services, repositories. Please see [README](https://github.com/Interhyp/metadata-service/blob/main/README.md) for details. **CLIENTS MUST READ!**

API version: v1
Contact: somebody@some-organisation.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the ProtectedRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProtectedRef{}

// ProtectedRef struct for ProtectedRef
type ProtectedRef struct {
	// fnmatch pattern to define protected refs. Must not start with refs/heads/ or refs/tags/. Special value :MAINLINE: matches the currently configured mainline for branch protections.
	Pattern string `json:"pattern" validate:"regexp=^(?!refs\\/(heads|tags)\\/).*$"`
	// list of users or groups for which this protection does not apply.
	Exemptions []string `json:"exemptions,omitempty"`
	// list of group identifiers for which this protection does not apply. This field is read-only and will be filled automatically from the exemptions fields.
	ExemptionsRoles []string `json:"exemptionsRoles,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ProtectedRef ProtectedRef

// NewProtectedRef instantiates a new ProtectedRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProtectedRef(pattern string) *ProtectedRef {
	this := ProtectedRef{}
	this.Pattern = pattern
	return &this
}

// NewProtectedRefWithDefaults instantiates a new ProtectedRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProtectedRefWithDefaults() *ProtectedRef {
	this := ProtectedRef{}
	return &this
}

// GetPattern returns the Pattern field value
func (o *ProtectedRef) GetPattern() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Pattern
}

// GetPatternOk returns a tuple with the Pattern field value
// and a boolean to check if the value has been set.
func (o *ProtectedRef) GetPatternOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pattern, true
}

// SetPattern sets field value
func (o *ProtectedRef) SetPattern(v string) {
	o.Pattern = v
}

// GetExemptions returns the Exemptions field value if set, zero value otherwise.
func (o *ProtectedRef) GetExemptions() []string {
	if o == nil || IsNil(o.Exemptions) {
		var ret []string
		return ret
	}
	return o.Exemptions
}

// GetExemptionsOk returns a tuple with the Exemptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtectedRef) GetExemptionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Exemptions) {
		return nil, false
	}
	return o.Exemptions, true
}

// HasExemptions returns a boolean if a field has been set.
func (o *ProtectedRef) HasExemptions() bool {
	if o != nil && !IsNil(o.Exemptions) {
		return true
	}

	return false
}

// SetExemptions gets a reference to the given []string and assigns it to the Exemptions field.
func (o *ProtectedRef) SetExemptions(v []string) {
	o.Exemptions = v
}

// GetExemptionsRoles returns the ExemptionsRoles field value if set, zero value otherwise.
func (o *ProtectedRef) GetExemptionsRoles() []string {
	if o == nil || IsNil(o.ExemptionsRoles) {
		var ret []string
		return ret
	}
	return o.ExemptionsRoles
}

// GetExemptionsRolesOk returns a tuple with the ExemptionsRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtectedRef) GetExemptionsRolesOk() ([]string, bool) {
	if o == nil || IsNil(o.ExemptionsRoles) {
		return nil, false
	}
	return o.ExemptionsRoles, true
}

// HasExemptionsRoles returns a boolean if a field has been set.
func (o *ProtectedRef) HasExemptionsRoles() bool {
	if o != nil && !IsNil(o.ExemptionsRoles) {
		return true
	}

	return false
}

// SetExemptionsRoles gets a reference to the given []string and assigns it to the ExemptionsRoles field.
func (o *ProtectedRef) SetExemptionsRoles(v []string) {
	o.ExemptionsRoles = v
}

func (o ProtectedRef) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProtectedRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pattern"] = o.Pattern
	if !IsNil(o.Exemptions) {
		toSerialize["exemptions"] = o.Exemptions
	}
	if !IsNil(o.ExemptionsRoles) {
		toSerialize["exemptionsRoles"] = o.ExemptionsRoles
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProtectedRef) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pattern",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProtectedRef := _ProtectedRef{}

	err = json.Unmarshal(data, &varProtectedRef)

	if err != nil {
		return err
	}

	*o = ProtectedRef(varProtectedRef)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "pattern")
		delete(additionalProperties, "exemptions")
		delete(additionalProperties, "exemptionsRoles")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProtectedRef struct {
	value *ProtectedRef
	isSet bool
}

func (v NullableProtectedRef) Get() *ProtectedRef {
	return v.value
}

func (v *NullableProtectedRef) Set(val *ProtectedRef) {
	v.value = val
	v.isSet = true
}

func (v NullableProtectedRef) IsSet() bool {
	return v.isSet
}

func (v *NullableProtectedRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtectedRef(val *ProtectedRef) *NullableProtectedRef {
	return &NullableProtectedRef{value: val, isSet: true}
}

func (v NullableProtectedRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtectedRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


