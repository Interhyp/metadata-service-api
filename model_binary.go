/*
Metadata

Obtain and manage metadata for owners, services, repositories. Please see [README](https://github.com/Interhyp/metadata-service/blob/main/README.md) for details. **CLIENTS MUST READ!**

API version: v1
Contact: somebody@some-organisation.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the Binary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Binary{}

// Binary Parameters to identify a binary in e.g. nexus
type Binary struct {
	// The group id of binary
	GroupId string `json:"groupId"`
	// The artifact id of binary
	ArtifactId string `json:"artifactId"`
	// The version prefix of binary
	VersionPrefix string `json:"versionPrefix"`
	// The classifier of binary
	Classifier *string `json:"classifier,omitempty"`
	// The file type of binary e.g. tar.gz
	FileType *string `json:"fileType,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Binary Binary

// NewBinary instantiates a new Binary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBinary(groupId string, artifactId string, versionPrefix string) *Binary {
	this := Binary{}
	this.GroupId = groupId
	this.ArtifactId = artifactId
	this.VersionPrefix = versionPrefix
	return &this
}

// NewBinaryWithDefaults instantiates a new Binary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBinaryWithDefaults() *Binary {
	this := Binary{}
	return &this
}

// GetGroupId returns the GroupId field value
func (o *Binary) GetGroupId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value
// and a boolean to check if the value has been set.
func (o *Binary) GetGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupId, true
}

// SetGroupId sets field value
func (o *Binary) SetGroupId(v string) {
	o.GroupId = v
}

// GetArtifactId returns the ArtifactId field value
func (o *Binary) GetArtifactId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ArtifactId
}

// GetArtifactIdOk returns a tuple with the ArtifactId field value
// and a boolean to check if the value has been set.
func (o *Binary) GetArtifactIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ArtifactId, true
}

// SetArtifactId sets field value
func (o *Binary) SetArtifactId(v string) {
	o.ArtifactId = v
}

// GetVersionPrefix returns the VersionPrefix field value
func (o *Binary) GetVersionPrefix() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VersionPrefix
}

// GetVersionPrefixOk returns a tuple with the VersionPrefix field value
// and a boolean to check if the value has been set.
func (o *Binary) GetVersionPrefixOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VersionPrefix, true
}

// SetVersionPrefix sets field value
func (o *Binary) SetVersionPrefix(v string) {
	o.VersionPrefix = v
}

// GetClassifier returns the Classifier field value if set, zero value otherwise.
func (o *Binary) GetClassifier() string {
	if o == nil || IsNil(o.Classifier) {
		var ret string
		return ret
	}
	return *o.Classifier
}

// GetClassifierOk returns a tuple with the Classifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Binary) GetClassifierOk() (*string, bool) {
	if o == nil || IsNil(o.Classifier) {
		return nil, false
	}
	return o.Classifier, true
}

// HasClassifier returns a boolean if a field has been set.
func (o *Binary) HasClassifier() bool {
	if o != nil && !IsNil(o.Classifier) {
		return true
	}

	return false
}

// SetClassifier gets a reference to the given string and assigns it to the Classifier field.
func (o *Binary) SetClassifier(v string) {
	o.Classifier = &v
}

// GetFileType returns the FileType field value if set, zero value otherwise.
func (o *Binary) GetFileType() string {
	if o == nil || IsNil(o.FileType) {
		var ret string
		return ret
	}
	return *o.FileType
}

// GetFileTypeOk returns a tuple with the FileType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Binary) GetFileTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FileType) {
		return nil, false
	}
	return o.FileType, true
}

// HasFileType returns a boolean if a field has been set.
func (o *Binary) HasFileType() bool {
	if o != nil && !IsNil(o.FileType) {
		return true
	}

	return false
}

// SetFileType gets a reference to the given string and assigns it to the FileType field.
func (o *Binary) SetFileType(v string) {
	o.FileType = &v
}

func (o Binary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Binary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["groupId"] = o.GroupId
	toSerialize["artifactId"] = o.ArtifactId
	toSerialize["versionPrefix"] = o.VersionPrefix
	if !IsNil(o.Classifier) {
		toSerialize["classifier"] = o.Classifier
	}
	if !IsNil(o.FileType) {
		toSerialize["fileType"] = o.FileType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Binary) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"groupId",
		"artifactId",
		"versionPrefix",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBinary := _Binary{}

	err = json.Unmarshal(data, &varBinary)

	if err != nil {
		return err
	}

	*o = Binary(varBinary)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "groupId")
		delete(additionalProperties, "artifactId")
		delete(additionalProperties, "versionPrefix")
		delete(additionalProperties, "classifier")
		delete(additionalProperties, "fileType")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBinary struct {
	value *Binary
	isSet bool
}

func (v NullableBinary) Get() *Binary {
	return v.value
}

func (v *NullableBinary) Set(val *Binary) {
	v.value = val
	v.isSet = true
}

func (v NullableBinary) IsSet() bool {
	return v.isSet
}

func (v *NullableBinary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBinary(val *Binary) *NullableBinary {
	return &NullableBinary{value: val, isSet: true}
}

func (v NullableBinary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBinary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


