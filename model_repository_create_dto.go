/*
Metadata

Obtain and manage metadata for owners, services, repositories. Please see [README](https://github.com/Interhyp/metadata-service/blob/main/README.md) for details. **CLIENTS MUST READ!**

API version: v1
Contact: somebody@some-organisation.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the RepositoryCreateDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RepositoryCreateDto{}

// RepositoryCreateDto struct for RepositoryCreateDto
type RepositoryCreateDto struct {
	// The alias of the repository owner
	Owner string `json:"owner"`
	Url string `json:"url"`
	Mainline string `json:"mainline"`
	// the generator used for the initial contents of this repository
	Generator *string `json:"generator,omitempty"`
	Configuration *RepositoryConfigurationDto `json:"configuration,omitempty"`
	// The jira issue to use for committing a change, or the last jira issue used.
	JiraIssue string `json:"jiraIssue"`
	// A map of arbitrary string labels attached to this repository.
	Labels map[string]string `json:"labels,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RepositoryCreateDto RepositoryCreateDto

// NewRepositoryCreateDto instantiates a new RepositoryCreateDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepositoryCreateDto(owner string, url string, mainline string, jiraIssue string) *RepositoryCreateDto {
	this := RepositoryCreateDto{}
	this.Owner = owner
	this.Url = url
	this.Mainline = mainline
	this.JiraIssue = jiraIssue
	return &this
}

// NewRepositoryCreateDtoWithDefaults instantiates a new RepositoryCreateDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepositoryCreateDtoWithDefaults() *RepositoryCreateDto {
	this := RepositoryCreateDto{}
	return &this
}

// GetOwner returns the Owner field value
func (o *RepositoryCreateDto) GetOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *RepositoryCreateDto) GetOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *RepositoryCreateDto) SetOwner(v string) {
	o.Owner = v
}

// GetUrl returns the Url field value
func (o *RepositoryCreateDto) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *RepositoryCreateDto) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *RepositoryCreateDto) SetUrl(v string) {
	o.Url = v
}

// GetMainline returns the Mainline field value
func (o *RepositoryCreateDto) GetMainline() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mainline
}

// GetMainlineOk returns a tuple with the Mainline field value
// and a boolean to check if the value has been set.
func (o *RepositoryCreateDto) GetMainlineOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mainline, true
}

// SetMainline sets field value
func (o *RepositoryCreateDto) SetMainline(v string) {
	o.Mainline = v
}

// GetGenerator returns the Generator field value if set, zero value otherwise.
func (o *RepositoryCreateDto) GetGenerator() string {
	if o == nil || IsNil(o.Generator) {
		var ret string
		return ret
	}
	return *o.Generator
}

// GetGeneratorOk returns a tuple with the Generator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryCreateDto) GetGeneratorOk() (*string, bool) {
	if o == nil || IsNil(o.Generator) {
		return nil, false
	}
	return o.Generator, true
}

// HasGenerator returns a boolean if a field has been set.
func (o *RepositoryCreateDto) HasGenerator() bool {
	if o != nil && !IsNil(o.Generator) {
		return true
	}

	return false
}

// SetGenerator gets a reference to the given string and assigns it to the Generator field.
func (o *RepositoryCreateDto) SetGenerator(v string) {
	o.Generator = &v
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise.
func (o *RepositoryCreateDto) GetConfiguration() RepositoryConfigurationDto {
	if o == nil || IsNil(o.Configuration) {
		var ret RepositoryConfigurationDto
		return ret
	}
	return *o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryCreateDto) GetConfigurationOk() (*RepositoryConfigurationDto, bool) {
	if o == nil || IsNil(o.Configuration) {
		return nil, false
	}
	return o.Configuration, true
}

// HasConfiguration returns a boolean if a field has been set.
func (o *RepositoryCreateDto) HasConfiguration() bool {
	if o != nil && !IsNil(o.Configuration) {
		return true
	}

	return false
}

// SetConfiguration gets a reference to the given RepositoryConfigurationDto and assigns it to the Configuration field.
func (o *RepositoryCreateDto) SetConfiguration(v RepositoryConfigurationDto) {
	o.Configuration = &v
}

// GetJiraIssue returns the JiraIssue field value
func (o *RepositoryCreateDto) GetJiraIssue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.JiraIssue
}

// GetJiraIssueOk returns a tuple with the JiraIssue field value
// and a boolean to check if the value has been set.
func (o *RepositoryCreateDto) GetJiraIssueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JiraIssue, true
}

// SetJiraIssue sets field value
func (o *RepositoryCreateDto) SetJiraIssue(v string) {
	o.JiraIssue = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *RepositoryCreateDto) GetLabels() map[string]string {
	if o == nil || IsNil(o.Labels) {
		var ret map[string]string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryCreateDto) GetLabelsOk() (map[string]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return map[string]string{}, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *RepositoryCreateDto) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *RepositoryCreateDto) SetLabels(v map[string]string) {
	o.Labels = v
}

func (o RepositoryCreateDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RepositoryCreateDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["owner"] = o.Owner
	toSerialize["url"] = o.Url
	toSerialize["mainline"] = o.Mainline
	if !IsNil(o.Generator) {
		toSerialize["generator"] = o.Generator
	}
	if !IsNil(o.Configuration) {
		toSerialize["configuration"] = o.Configuration
	}
	toSerialize["jiraIssue"] = o.JiraIssue
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RepositoryCreateDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"owner",
		"url",
		"mainline",
		"jiraIssue",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRepositoryCreateDto := _RepositoryCreateDto{}

	err = json.Unmarshal(data, &varRepositoryCreateDto)

	if err != nil {
		return err
	}

	*o = RepositoryCreateDto(varRepositoryCreateDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "owner")
		delete(additionalProperties, "url")
		delete(additionalProperties, "mainline")
		delete(additionalProperties, "generator")
		delete(additionalProperties, "configuration")
		delete(additionalProperties, "jiraIssue")
		delete(additionalProperties, "labels")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRepositoryCreateDto struct {
	value *RepositoryCreateDto
	isSet bool
}

func (v NullableRepositoryCreateDto) Get() *RepositoryCreateDto {
	return v.value
}

func (v *NullableRepositoryCreateDto) Set(val *RepositoryCreateDto) {
	v.value = val
	v.isSet = true
}

func (v NullableRepositoryCreateDto) IsSet() bool {
	return v.isSet
}

func (v *NullableRepositoryCreateDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepositoryCreateDto(val *RepositoryCreateDto) *NullableRepositoryCreateDto {
	return &NullableRepositoryCreateDto{value: val, isSet: true}
}

func (v NullableRepositoryCreateDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepositoryCreateDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


