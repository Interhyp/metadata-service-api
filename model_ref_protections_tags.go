/*
Metadata

Obtain and manage metadata for owners, services, repositories. Please see [README](https://github.com/Interhyp/metadata-service/blob/main/README.md) for details. **CLIENTS MUST READ!**

API version: v1
Contact: somebody@some-organisation.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RefProtectionsTags type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RefProtectionsTags{}

// RefProtectionsTags struct for RefProtectionsTags
type RefProtectionsTags struct {
	// Prevents all changes of the protected refs.
	PreventAllChanges []ProtectedRef `json:"preventAllChanges,omitempty"`
	// Prevents creation of the protected refs.
	PreventCreation []ProtectedRef `json:"preventCreation,omitempty"`
	// Prevents deletion of the protected refs.
	PreventDeletion []ProtectedRef `json:"preventDeletion,omitempty"`
	// Prevents force pushes to the protected refs for users with push permission.
	PreventForcePush []ProtectedRef `json:"preventForcePush,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RefProtectionsTags RefProtectionsTags

// NewRefProtectionsTags instantiates a new RefProtectionsTags object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRefProtectionsTags() *RefProtectionsTags {
	this := RefProtectionsTags{}
	return &this
}

// NewRefProtectionsTagsWithDefaults instantiates a new RefProtectionsTags object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRefProtectionsTagsWithDefaults() *RefProtectionsTags {
	this := RefProtectionsTags{}
	return &this
}

// GetPreventAllChanges returns the PreventAllChanges field value if set, zero value otherwise.
func (o *RefProtectionsTags) GetPreventAllChanges() []ProtectedRef {
	if o == nil || IsNil(o.PreventAllChanges) {
		var ret []ProtectedRef
		return ret
	}
	return o.PreventAllChanges
}

// GetPreventAllChangesOk returns a tuple with the PreventAllChanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefProtectionsTags) GetPreventAllChangesOk() ([]ProtectedRef, bool) {
	if o == nil || IsNil(o.PreventAllChanges) {
		return nil, false
	}
	return o.PreventAllChanges, true
}

// HasPreventAllChanges returns a boolean if a field has been set.
func (o *RefProtectionsTags) HasPreventAllChanges() bool {
	if o != nil && !IsNil(o.PreventAllChanges) {
		return true
	}

	return false
}

// SetPreventAllChanges gets a reference to the given []ProtectedRef and assigns it to the PreventAllChanges field.
func (o *RefProtectionsTags) SetPreventAllChanges(v []ProtectedRef) {
	o.PreventAllChanges = v
}

// GetPreventCreation returns the PreventCreation field value if set, zero value otherwise.
func (o *RefProtectionsTags) GetPreventCreation() []ProtectedRef {
	if o == nil || IsNil(o.PreventCreation) {
		var ret []ProtectedRef
		return ret
	}
	return o.PreventCreation
}

// GetPreventCreationOk returns a tuple with the PreventCreation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefProtectionsTags) GetPreventCreationOk() ([]ProtectedRef, bool) {
	if o == nil || IsNil(o.PreventCreation) {
		return nil, false
	}
	return o.PreventCreation, true
}

// HasPreventCreation returns a boolean if a field has been set.
func (o *RefProtectionsTags) HasPreventCreation() bool {
	if o != nil && !IsNil(o.PreventCreation) {
		return true
	}

	return false
}

// SetPreventCreation gets a reference to the given []ProtectedRef and assigns it to the PreventCreation field.
func (o *RefProtectionsTags) SetPreventCreation(v []ProtectedRef) {
	o.PreventCreation = v
}

// GetPreventDeletion returns the PreventDeletion field value if set, zero value otherwise.
func (o *RefProtectionsTags) GetPreventDeletion() []ProtectedRef {
	if o == nil || IsNil(o.PreventDeletion) {
		var ret []ProtectedRef
		return ret
	}
	return o.PreventDeletion
}

// GetPreventDeletionOk returns a tuple with the PreventDeletion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefProtectionsTags) GetPreventDeletionOk() ([]ProtectedRef, bool) {
	if o == nil || IsNil(o.PreventDeletion) {
		return nil, false
	}
	return o.PreventDeletion, true
}

// HasPreventDeletion returns a boolean if a field has been set.
func (o *RefProtectionsTags) HasPreventDeletion() bool {
	if o != nil && !IsNil(o.PreventDeletion) {
		return true
	}

	return false
}

// SetPreventDeletion gets a reference to the given []ProtectedRef and assigns it to the PreventDeletion field.
func (o *RefProtectionsTags) SetPreventDeletion(v []ProtectedRef) {
	o.PreventDeletion = v
}

// GetPreventForcePush returns the PreventForcePush field value if set, zero value otherwise.
func (o *RefProtectionsTags) GetPreventForcePush() []ProtectedRef {
	if o == nil || IsNil(o.PreventForcePush) {
		var ret []ProtectedRef
		return ret
	}
	return o.PreventForcePush
}

// GetPreventForcePushOk returns a tuple with the PreventForcePush field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefProtectionsTags) GetPreventForcePushOk() ([]ProtectedRef, bool) {
	if o == nil || IsNil(o.PreventForcePush) {
		return nil, false
	}
	return o.PreventForcePush, true
}

// HasPreventForcePush returns a boolean if a field has been set.
func (o *RefProtectionsTags) HasPreventForcePush() bool {
	if o != nil && !IsNil(o.PreventForcePush) {
		return true
	}

	return false
}

// SetPreventForcePush gets a reference to the given []ProtectedRef and assigns it to the PreventForcePush field.
func (o *RefProtectionsTags) SetPreventForcePush(v []ProtectedRef) {
	o.PreventForcePush = v
}

func (o RefProtectionsTags) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RefProtectionsTags) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PreventAllChanges) {
		toSerialize["preventAllChanges"] = o.PreventAllChanges
	}
	if !IsNil(o.PreventCreation) {
		toSerialize["preventCreation"] = o.PreventCreation
	}
	if !IsNil(o.PreventDeletion) {
		toSerialize["preventDeletion"] = o.PreventDeletion
	}
	if !IsNil(o.PreventForcePush) {
		toSerialize["preventForcePush"] = o.PreventForcePush
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RefProtectionsTags) UnmarshalJSON(data []byte) (err error) {
	varRefProtectionsTags := _RefProtectionsTags{}

	err = json.Unmarshal(data, &varRefProtectionsTags)

	if err != nil {
		return err
	}

	*o = RefProtectionsTags(varRefProtectionsTags)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "preventAllChanges")
		delete(additionalProperties, "preventCreation")
		delete(additionalProperties, "preventDeletion")
		delete(additionalProperties, "preventForcePush")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRefProtectionsTags struct {
	value *RefProtectionsTags
	isSet bool
}

func (v NullableRefProtectionsTags) Get() *RefProtectionsTags {
	return v.value
}

func (v *NullableRefProtectionsTags) Set(val *RefProtectionsTags) {
	v.value = val
	v.isSet = true
}

func (v NullableRefProtectionsTags) IsSet() bool {
	return v.isSet
}

func (v *NullableRefProtectionsTags) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRefProtectionsTags(val *RefProtectionsTags) *NullableRefProtectionsTags {
	return &NullableRefProtectionsTags{value: val, isSet: true}
}

func (v NullableRefProtectionsTags) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRefProtectionsTags) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


