/*
Metadata

Obtain and manage metadata for owners, services, repositories. Please see [README](https://github.com/Interhyp/metadata-service/blob/main/README.md) for details. **CLIENTS MUST READ!**

API version: v1
Contact: somebody@some-organisation.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RepositoryConfigurationAccessKeyDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RepositoryConfigurationAccessKeyDto{}

// RepositoryConfigurationAccessKeyDto struct for RepositoryConfigurationAccessKeyDto
type RepositoryConfigurationAccessKeyDto struct {
	Key *string `json:"key,omitempty"`
	Data *string `json:"data,omitempty"`
	Permission *string `json:"permission,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RepositoryConfigurationAccessKeyDto RepositoryConfigurationAccessKeyDto

// NewRepositoryConfigurationAccessKeyDto instantiates a new RepositoryConfigurationAccessKeyDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepositoryConfigurationAccessKeyDto() *RepositoryConfigurationAccessKeyDto {
	this := RepositoryConfigurationAccessKeyDto{}
	return &this
}

// NewRepositoryConfigurationAccessKeyDtoWithDefaults instantiates a new RepositoryConfigurationAccessKeyDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepositoryConfigurationAccessKeyDtoWithDefaults() *RepositoryConfigurationAccessKeyDto {
	this := RepositoryConfigurationAccessKeyDto{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *RepositoryConfigurationAccessKeyDto) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryConfigurationAccessKeyDto) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *RepositoryConfigurationAccessKeyDto) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *RepositoryConfigurationAccessKeyDto) SetKey(v string) {
	o.Key = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *RepositoryConfigurationAccessKeyDto) GetData() string {
	if o == nil || IsNil(o.Data) {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryConfigurationAccessKeyDto) GetDataOk() (*string, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *RepositoryConfigurationAccessKeyDto) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *RepositoryConfigurationAccessKeyDto) SetData(v string) {
	o.Data = &v
}

// GetPermission returns the Permission field value if set, zero value otherwise.
func (o *RepositoryConfigurationAccessKeyDto) GetPermission() string {
	if o == nil || IsNil(o.Permission) {
		var ret string
		return ret
	}
	return *o.Permission
}

// GetPermissionOk returns a tuple with the Permission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryConfigurationAccessKeyDto) GetPermissionOk() (*string, bool) {
	if o == nil || IsNil(o.Permission) {
		return nil, false
	}
	return o.Permission, true
}

// HasPermission returns a boolean if a field has been set.
func (o *RepositoryConfigurationAccessKeyDto) HasPermission() bool {
	if o != nil && !IsNil(o.Permission) {
		return true
	}

	return false
}

// SetPermission gets a reference to the given string and assigns it to the Permission field.
func (o *RepositoryConfigurationAccessKeyDto) SetPermission(v string) {
	o.Permission = &v
}

func (o RepositoryConfigurationAccessKeyDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RepositoryConfigurationAccessKeyDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Permission) {
		toSerialize["permission"] = o.Permission
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RepositoryConfigurationAccessKeyDto) UnmarshalJSON(data []byte) (err error) {
	varRepositoryConfigurationAccessKeyDto := _RepositoryConfigurationAccessKeyDto{}

	err = json.Unmarshal(data, &varRepositoryConfigurationAccessKeyDto)

	if err != nil {
		return err
	}

	*o = RepositoryConfigurationAccessKeyDto(varRepositoryConfigurationAccessKeyDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "key")
		delete(additionalProperties, "data")
		delete(additionalProperties, "permission")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRepositoryConfigurationAccessKeyDto struct {
	value *RepositoryConfigurationAccessKeyDto
	isSet bool
}

func (v NullableRepositoryConfigurationAccessKeyDto) Get() *RepositoryConfigurationAccessKeyDto {
	return v.value
}

func (v *NullableRepositoryConfigurationAccessKeyDto) Set(val *RepositoryConfigurationAccessKeyDto) {
	v.value = val
	v.isSet = true
}

func (v NullableRepositoryConfigurationAccessKeyDto) IsSet() bool {
	return v.isSet
}

func (v *NullableRepositoryConfigurationAccessKeyDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepositoryConfigurationAccessKeyDto(val *RepositoryConfigurationAccessKeyDto) *NullableRepositoryConfigurationAccessKeyDto {
	return &NullableRepositoryConfigurationAccessKeyDto{value: val, isSet: true}
}

func (v NullableRepositoryConfigurationAccessKeyDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepositoryConfigurationAccessKeyDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


