/*
Metadata

Obtain and manage metadata for owners, services, repositories. Please see [README](https://github.com/Interhyp/metadata-service/blob/main/README.md) for details. **CLIENTS MUST READ!**

API version: v1
Contact: somebody@some-organisation.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the ServiceCreateDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceCreateDto{}

// ServiceCreateDto struct for ServiceCreateDto
type ServiceCreateDto struct {
	// The alias of the service owner. Note, an update with changed owner will move the service and any associated repositories to the new owner, but of course this will not move e.g. Jenkins jobs. That's your job.
	Owner string `json:"owner" yaml:"-"`
	// A short description of the functionality of the service.
	Description *string `json:"description,omitempty"`
	// A list of quicklinks related to the service
	Quicklinks []Quicklink `json:"quicklinks"`
	// The keys of repositories associated with the service. When sending an update, they must refer to repositories that belong to this service, or the update will fail
	Repositories []string `json:"repositories"`
	// The default channel used to send any alerts of the service to. Can be an email address or a Teams webhook URL
	AlertTarget string `json:"alertTarget"`
	// The operation type of the service. 'WORKLOAD' follows the default deployment strategy of one instance per environment, 'PLATFORM' one instance per cluster or node and 'APPLICATION' is a standalone application that is not deployed via the common strategies.
	OperationType *string `json:"operationType,omitempty"`
	// The value defines if the service is available from the internet and the time period in which security holes must be processed.
	InternetExposed *bool `json:"internetExposed,omitempty"`
	Tags []string `json:"tags,omitempty"`
	Labels map[string]string `json:"labels,omitempty"`
	Spec *ServiceSpecDto `json:"spec,omitempty"`
	// Post promote dependencies.
	PostPromotes *PostPromote `json:"postPromotes,omitempty"`
	// The jira issue to use for committing a change, or the last jira issue used.
	JiraIssue string `json:"jiraIssue" yaml:"-"`
	AdditionalProperties map[string]interface{}
}

type _ServiceCreateDto ServiceCreateDto

// NewServiceCreateDto instantiates a new ServiceCreateDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceCreateDto(owner string, quicklinks []Quicklink, repositories []string, alertTarget string, jiraIssue string) *ServiceCreateDto {
	this := ServiceCreateDto{}
	this.Owner = owner
	this.Quicklinks = quicklinks
	this.Repositories = repositories
	this.AlertTarget = alertTarget
	var operationType string = "WORKLOAD"
	this.OperationType = &operationType
	this.JiraIssue = jiraIssue
	return &this
}

// NewServiceCreateDtoWithDefaults instantiates a new ServiceCreateDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceCreateDtoWithDefaults() *ServiceCreateDto {
	this := ServiceCreateDto{}
	var operationType string = "WORKLOAD"
	this.OperationType = &operationType
	return &this
}

// GetOwner returns the Owner field value
func (o *ServiceCreateDto) GetOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *ServiceCreateDto) GetOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *ServiceCreateDto) SetOwner(v string) {
	o.Owner = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ServiceCreateDto) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceCreateDto) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ServiceCreateDto) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ServiceCreateDto) SetDescription(v string) {
	o.Description = &v
}

// GetQuicklinks returns the Quicklinks field value
func (o *ServiceCreateDto) GetQuicklinks() []Quicklink {
	if o == nil {
		var ret []Quicklink
		return ret
	}

	return o.Quicklinks
}

// GetQuicklinksOk returns a tuple with the Quicklinks field value
// and a boolean to check if the value has been set.
func (o *ServiceCreateDto) GetQuicklinksOk() ([]Quicklink, bool) {
	if o == nil {
		return nil, false
	}
	return o.Quicklinks, true
}

// SetQuicklinks sets field value
func (o *ServiceCreateDto) SetQuicklinks(v []Quicklink) {
	o.Quicklinks = v
}

// GetRepositories returns the Repositories field value
func (o *ServiceCreateDto) GetRepositories() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Repositories
}

// GetRepositoriesOk returns a tuple with the Repositories field value
// and a boolean to check if the value has been set.
func (o *ServiceCreateDto) GetRepositoriesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Repositories, true
}

// SetRepositories sets field value
func (o *ServiceCreateDto) SetRepositories(v []string) {
	o.Repositories = v
}

// GetAlertTarget returns the AlertTarget field value
func (o *ServiceCreateDto) GetAlertTarget() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AlertTarget
}

// GetAlertTargetOk returns a tuple with the AlertTarget field value
// and a boolean to check if the value has been set.
func (o *ServiceCreateDto) GetAlertTargetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AlertTarget, true
}

// SetAlertTarget sets field value
func (o *ServiceCreateDto) SetAlertTarget(v string) {
	o.AlertTarget = v
}

// GetOperationType returns the OperationType field value if set, zero value otherwise.
func (o *ServiceCreateDto) GetOperationType() string {
	if o == nil || IsNil(o.OperationType) {
		var ret string
		return ret
	}
	return *o.OperationType
}

// GetOperationTypeOk returns a tuple with the OperationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceCreateDto) GetOperationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.OperationType) {
		return nil, false
	}
	return o.OperationType, true
}

// HasOperationType returns a boolean if a field has been set.
func (o *ServiceCreateDto) HasOperationType() bool {
	if o != nil && !IsNil(o.OperationType) {
		return true
	}

	return false
}

// SetOperationType gets a reference to the given string and assigns it to the OperationType field.
func (o *ServiceCreateDto) SetOperationType(v string) {
	o.OperationType = &v
}

// GetInternetExposed returns the InternetExposed field value if set, zero value otherwise.
func (o *ServiceCreateDto) GetInternetExposed() bool {
	if o == nil || IsNil(o.InternetExposed) {
		var ret bool
		return ret
	}
	return *o.InternetExposed
}

// GetInternetExposedOk returns a tuple with the InternetExposed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceCreateDto) GetInternetExposedOk() (*bool, bool) {
	if o == nil || IsNil(o.InternetExposed) {
		return nil, false
	}
	return o.InternetExposed, true
}

// HasInternetExposed returns a boolean if a field has been set.
func (o *ServiceCreateDto) HasInternetExposed() bool {
	if o != nil && !IsNil(o.InternetExposed) {
		return true
	}

	return false
}

// SetInternetExposed gets a reference to the given bool and assigns it to the InternetExposed field.
func (o *ServiceCreateDto) SetInternetExposed(v bool) {
	o.InternetExposed = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ServiceCreateDto) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceCreateDto) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ServiceCreateDto) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *ServiceCreateDto) SetTags(v []string) {
	o.Tags = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *ServiceCreateDto) GetLabels() map[string]string {
	if o == nil || IsNil(o.Labels) {
		var ret map[string]string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceCreateDto) GetLabelsOk() (map[string]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return map[string]string{}, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *ServiceCreateDto) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *ServiceCreateDto) SetLabels(v map[string]string) {
	o.Labels = v
}

// GetSpec returns the Spec field value if set, zero value otherwise.
func (o *ServiceCreateDto) GetSpec() ServiceSpecDto {
	if o == nil || IsNil(o.Spec) {
		var ret ServiceSpecDto
		return ret
	}
	return *o.Spec
}

// GetSpecOk returns a tuple with the Spec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceCreateDto) GetSpecOk() (*ServiceSpecDto, bool) {
	if o == nil || IsNil(o.Spec) {
		return nil, false
	}
	return o.Spec, true
}

// HasSpec returns a boolean if a field has been set.
func (o *ServiceCreateDto) HasSpec() bool {
	if o != nil && !IsNil(o.Spec) {
		return true
	}

	return false
}

// SetSpec gets a reference to the given ServiceSpecDto and assigns it to the Spec field.
func (o *ServiceCreateDto) SetSpec(v ServiceSpecDto) {
	o.Spec = &v
}

// GetPostPromotes returns the PostPromotes field value if set, zero value otherwise.
func (o *ServiceCreateDto) GetPostPromotes() PostPromote {
	if o == nil || IsNil(o.PostPromotes) {
		var ret PostPromote
		return ret
	}
	return *o.PostPromotes
}

// GetPostPromotesOk returns a tuple with the PostPromotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceCreateDto) GetPostPromotesOk() (*PostPromote, bool) {
	if o == nil || IsNil(o.PostPromotes) {
		return nil, false
	}
	return o.PostPromotes, true
}

// HasPostPromotes returns a boolean if a field has been set.
func (o *ServiceCreateDto) HasPostPromotes() bool {
	if o != nil && !IsNil(o.PostPromotes) {
		return true
	}

	return false
}

// SetPostPromotes gets a reference to the given PostPromote and assigns it to the PostPromotes field.
func (o *ServiceCreateDto) SetPostPromotes(v PostPromote) {
	o.PostPromotes = &v
}

// GetJiraIssue returns the JiraIssue field value
func (o *ServiceCreateDto) GetJiraIssue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.JiraIssue
}

// GetJiraIssueOk returns a tuple with the JiraIssue field value
// and a boolean to check if the value has been set.
func (o *ServiceCreateDto) GetJiraIssueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JiraIssue, true
}

// SetJiraIssue sets field value
func (o *ServiceCreateDto) SetJiraIssue(v string) {
	o.JiraIssue = v
}

func (o ServiceCreateDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceCreateDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["owner"] = o.Owner
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["quicklinks"] = o.Quicklinks
	toSerialize["repositories"] = o.Repositories
	toSerialize["alertTarget"] = o.AlertTarget
	if !IsNil(o.OperationType) {
		toSerialize["operationType"] = o.OperationType
	}
	if !IsNil(o.InternetExposed) {
		toSerialize["internetExposed"] = o.InternetExposed
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.Spec) {
		toSerialize["spec"] = o.Spec
	}
	if !IsNil(o.PostPromotes) {
		toSerialize["postPromotes"] = o.PostPromotes
	}
	toSerialize["jiraIssue"] = o.JiraIssue

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServiceCreateDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"owner",
		"quicklinks",
		"repositories",
		"alertTarget",
		"jiraIssue",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServiceCreateDto := _ServiceCreateDto{}

	err = json.Unmarshal(data, &varServiceCreateDto)

	if err != nil {
		return err
	}

	*o = ServiceCreateDto(varServiceCreateDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "owner")
		delete(additionalProperties, "description")
		delete(additionalProperties, "quicklinks")
		delete(additionalProperties, "repositories")
		delete(additionalProperties, "alertTarget")
		delete(additionalProperties, "operationType")
		delete(additionalProperties, "internetExposed")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "labels")
		delete(additionalProperties, "spec")
		delete(additionalProperties, "postPromotes")
		delete(additionalProperties, "jiraIssue")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServiceCreateDto struct {
	value *ServiceCreateDto
	isSet bool
}

func (v NullableServiceCreateDto) Get() *ServiceCreateDto {
	return v.value
}

func (v *NullableServiceCreateDto) Set(val *ServiceCreateDto) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceCreateDto) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceCreateDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceCreateDto(val *ServiceCreateDto) *NullableServiceCreateDto {
	return &NullableServiceCreateDto{value: val, isSet: true}
}

func (v NullableServiceCreateDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceCreateDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


