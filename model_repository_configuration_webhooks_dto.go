/*
Metadata

Obtain and manage metadata for owners, services, repositories. Please see [README](https://github.com/Interhyp/metadata-service/blob/main/README.md) for details. **CLIENTS MUST READ!**

API version: v1
Contact: somebody@some-organisation.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RepositoryConfigurationWebhooksDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RepositoryConfigurationWebhooksDto{}

// RepositoryConfigurationWebhooksDto Webhooks configured to the repository.
type RepositoryConfigurationWebhooksDto struct {
	// List of predefined webhooks
	Predefined []string `json:"predefined,omitempty"`
	// Additional webhooks to be configured.
	Additional []RepositoryConfigurationWebhookDto `json:"additional,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RepositoryConfigurationWebhooksDto RepositoryConfigurationWebhooksDto

// NewRepositoryConfigurationWebhooksDto instantiates a new RepositoryConfigurationWebhooksDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepositoryConfigurationWebhooksDto() *RepositoryConfigurationWebhooksDto {
	this := RepositoryConfigurationWebhooksDto{}
	return &this
}

// NewRepositoryConfigurationWebhooksDtoWithDefaults instantiates a new RepositoryConfigurationWebhooksDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepositoryConfigurationWebhooksDtoWithDefaults() *RepositoryConfigurationWebhooksDto {
	this := RepositoryConfigurationWebhooksDto{}
	return &this
}

// GetPredefined returns the Predefined field value if set, zero value otherwise.
func (o *RepositoryConfigurationWebhooksDto) GetPredefined() []string {
	if o == nil || IsNil(o.Predefined) {
		var ret []string
		return ret
	}
	return o.Predefined
}

// GetPredefinedOk returns a tuple with the Predefined field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryConfigurationWebhooksDto) GetPredefinedOk() ([]string, bool) {
	if o == nil || IsNil(o.Predefined) {
		return nil, false
	}
	return o.Predefined, true
}

// HasPredefined returns a boolean if a field has been set.
func (o *RepositoryConfigurationWebhooksDto) HasPredefined() bool {
	if o != nil && !IsNil(o.Predefined) {
		return true
	}

	return false
}

// SetPredefined gets a reference to the given []string and assigns it to the Predefined field.
func (o *RepositoryConfigurationWebhooksDto) SetPredefined(v []string) {
	o.Predefined = v
}

// GetAdditional returns the Additional field value if set, zero value otherwise.
func (o *RepositoryConfigurationWebhooksDto) GetAdditional() []RepositoryConfigurationWebhookDto {
	if o == nil || IsNil(o.Additional) {
		var ret []RepositoryConfigurationWebhookDto
		return ret
	}
	return o.Additional
}

// GetAdditionalOk returns a tuple with the Additional field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryConfigurationWebhooksDto) GetAdditionalOk() ([]RepositoryConfigurationWebhookDto, bool) {
	if o == nil || IsNil(o.Additional) {
		return nil, false
	}
	return o.Additional, true
}

// HasAdditional returns a boolean if a field has been set.
func (o *RepositoryConfigurationWebhooksDto) HasAdditional() bool {
	if o != nil && !IsNil(o.Additional) {
		return true
	}

	return false
}

// SetAdditional gets a reference to the given []RepositoryConfigurationWebhookDto and assigns it to the Additional field.
func (o *RepositoryConfigurationWebhooksDto) SetAdditional(v []RepositoryConfigurationWebhookDto) {
	o.Additional = v
}

func (o RepositoryConfigurationWebhooksDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RepositoryConfigurationWebhooksDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Predefined) {
		toSerialize["predefined"] = o.Predefined
	}
	if !IsNil(o.Additional) {
		toSerialize["additional"] = o.Additional
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RepositoryConfigurationWebhooksDto) UnmarshalJSON(data []byte) (err error) {
	varRepositoryConfigurationWebhooksDto := _RepositoryConfigurationWebhooksDto{}

	err = json.Unmarshal(data, &varRepositoryConfigurationWebhooksDto)

	if err != nil {
		return err
	}

	*o = RepositoryConfigurationWebhooksDto(varRepositoryConfigurationWebhooksDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "predefined")
		delete(additionalProperties, "additional")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRepositoryConfigurationWebhooksDto struct {
	value *RepositoryConfigurationWebhooksDto
	isSet bool
}

func (v NullableRepositoryConfigurationWebhooksDto) Get() *RepositoryConfigurationWebhooksDto {
	return v.value
}

func (v *NullableRepositoryConfigurationWebhooksDto) Set(val *RepositoryConfigurationWebhooksDto) {
	v.value = val
	v.isSet = true
}

func (v NullableRepositoryConfigurationWebhooksDto) IsSet() bool {
	return v.isSet
}

func (v *NullableRepositoryConfigurationWebhooksDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepositoryConfigurationWebhooksDto(val *RepositoryConfigurationWebhooksDto) *NullableRepositoryConfigurationWebhooksDto {
	return &NullableRepositoryConfigurationWebhooksDto{value: val, isSet: true}
}

func (v NullableRepositoryConfigurationWebhooksDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepositoryConfigurationWebhooksDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


