/*
Metadata

Obtain and manage metadata for owners, services, repositories. Please see [README](https://github.com/Interhyp/metadata-service/blob/main/README.md) for details. **CLIENTS MUST READ!**

API version: v1
Contact: somebody@some-organisation.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PullRequests type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PullRequests{}

// PullRequests Configures pull request settings
type PullRequests struct {
	// Allows merge commits on pull requests
	AllowMergeCommits *bool `json:"allowMergeCommits,omitempty"`
	// Allows rebase merging on pull requests
	AllowRebaseMerging *bool `json:"allowRebaseMerging,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PullRequests PullRequests

// NewPullRequests instantiates a new PullRequests object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPullRequests() *PullRequests {
	this := PullRequests{}
	var allowMergeCommits bool = true
	this.AllowMergeCommits = &allowMergeCommits
	var allowRebaseMerging bool = true
	this.AllowRebaseMerging = &allowRebaseMerging
	return &this
}

// NewPullRequestsWithDefaults instantiates a new PullRequests object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPullRequestsWithDefaults() *PullRequests {
	this := PullRequests{}
	var allowMergeCommits bool = true
	this.AllowMergeCommits = &allowMergeCommits
	var allowRebaseMerging bool = true
	this.AllowRebaseMerging = &allowRebaseMerging
	return &this
}

// GetAllowMergeCommits returns the AllowMergeCommits field value if set, zero value otherwise.
func (o *PullRequests) GetAllowMergeCommits() bool {
	if o == nil || IsNil(o.AllowMergeCommits) {
		var ret bool
		return ret
	}
	return *o.AllowMergeCommits
}

// GetAllowMergeCommitsOk returns a tuple with the AllowMergeCommits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullRequests) GetAllowMergeCommitsOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowMergeCommits) {
		return nil, false
	}
	return o.AllowMergeCommits, true
}

// HasAllowMergeCommits returns a boolean if a field has been set.
func (o *PullRequests) HasAllowMergeCommits() bool {
	if o != nil && !IsNil(o.AllowMergeCommits) {
		return true
	}

	return false
}

// SetAllowMergeCommits gets a reference to the given bool and assigns it to the AllowMergeCommits field.
func (o *PullRequests) SetAllowMergeCommits(v bool) {
	o.AllowMergeCommits = &v
}

// GetAllowRebaseMerging returns the AllowRebaseMerging field value if set, zero value otherwise.
func (o *PullRequests) GetAllowRebaseMerging() bool {
	if o == nil || IsNil(o.AllowRebaseMerging) {
		var ret bool
		return ret
	}
	return *o.AllowRebaseMerging
}

// GetAllowRebaseMergingOk returns a tuple with the AllowRebaseMerging field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullRequests) GetAllowRebaseMergingOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowRebaseMerging) {
		return nil, false
	}
	return o.AllowRebaseMerging, true
}

// HasAllowRebaseMerging returns a boolean if a field has been set.
func (o *PullRequests) HasAllowRebaseMerging() bool {
	if o != nil && !IsNil(o.AllowRebaseMerging) {
		return true
	}

	return false
}

// SetAllowRebaseMerging gets a reference to the given bool and assigns it to the AllowRebaseMerging field.
func (o *PullRequests) SetAllowRebaseMerging(v bool) {
	o.AllowRebaseMerging = &v
}

func (o PullRequests) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PullRequests) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowMergeCommits) {
		toSerialize["allowMergeCommits"] = o.AllowMergeCommits
	}
	if !IsNil(o.AllowRebaseMerging) {
		toSerialize["allowRebaseMerging"] = o.AllowRebaseMerging
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PullRequests) UnmarshalJSON(data []byte) (err error) {
	varPullRequests := _PullRequests{}

	err = json.Unmarshal(data, &varPullRequests)

	if err != nil {
		return err
	}

	*o = PullRequests(varPullRequests)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "allowMergeCommits")
		delete(additionalProperties, "allowRebaseMerging")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePullRequests struct {
	value *PullRequests
	isSet bool
}

func (v NullablePullRequests) Get() *PullRequests {
	return v.value
}

func (v *NullablePullRequests) Set(val *PullRequests) {
	v.value = val
	v.isSet = true
}

func (v NullablePullRequests) IsSet() bool {
	return v.isSet
}

func (v *NullablePullRequests) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePullRequests(val *PullRequests) *NullablePullRequests {
	return &NullablePullRequests{value: val, isSet: true}
}

func (v NullablePullRequests) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePullRequests) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


