/*
Metadata

Obtain and manage metadata for owners, services, repositories. Please see [README](https://github.com/Interhyp/metadata-service/blob/main/README.md) for details. **CLIENTS MUST READ!**

API version: v1
Contact: somebody@some-organisation.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RefProtections type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RefProtections{}

// RefProtections Configures available protections for git refs
type RefProtections struct {
	Branches *RefProtectionsBranches `json:"branches,omitempty"`
	Tags *RefProtectionsTags `json:"tags,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RefProtections RefProtections

// NewRefProtections instantiates a new RefProtections object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRefProtections() *RefProtections {
	this := RefProtections{}
	return &this
}

// NewRefProtectionsWithDefaults instantiates a new RefProtections object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRefProtectionsWithDefaults() *RefProtections {
	this := RefProtections{}
	return &this
}

// GetBranches returns the Branches field value if set, zero value otherwise.
func (o *RefProtections) GetBranches() RefProtectionsBranches {
	if o == nil || IsNil(o.Branches) {
		var ret RefProtectionsBranches
		return ret
	}
	return *o.Branches
}

// GetBranchesOk returns a tuple with the Branches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefProtections) GetBranchesOk() (*RefProtectionsBranches, bool) {
	if o == nil || IsNil(o.Branches) {
		return nil, false
	}
	return o.Branches, true
}

// HasBranches returns a boolean if a field has been set.
func (o *RefProtections) HasBranches() bool {
	if o != nil && !IsNil(o.Branches) {
		return true
	}

	return false
}

// SetBranches gets a reference to the given RefProtectionsBranches and assigns it to the Branches field.
func (o *RefProtections) SetBranches(v RefProtectionsBranches) {
	o.Branches = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *RefProtections) GetTags() RefProtectionsTags {
	if o == nil || IsNil(o.Tags) {
		var ret RefProtectionsTags
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefProtections) GetTagsOk() (*RefProtectionsTags, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *RefProtections) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given RefProtectionsTags and assigns it to the Tags field.
func (o *RefProtections) SetTags(v RefProtectionsTags) {
	o.Tags = &v
}

func (o RefProtections) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RefProtections) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Branches) {
		toSerialize["branches"] = o.Branches
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RefProtections) UnmarshalJSON(data []byte) (err error) {
	varRefProtections := _RefProtections{}

	err = json.Unmarshal(data, &varRefProtections)

	if err != nil {
		return err
	}

	*o = RefProtections(varRefProtections)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "branches")
		delete(additionalProperties, "tags")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRefProtections struct {
	value *RefProtections
	isSet bool
}

func (v NullableRefProtections) Get() *RefProtections {
	return v.value
}

func (v *NullableRefProtections) Set(val *RefProtections) {
	v.value = val
	v.isSet = true
}

func (v NullableRefProtections) IsSet() bool {
	return v.isSet
}

func (v *NullableRefProtections) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRefProtections(val *RefProtections) *NullableRefProtections {
	return &NullableRefProtections{value: val, isSet: true}
}

func (v NullableRefProtections) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRefProtections) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


