/*
Metadata

Obtain and manage metadata for owners, services, repositories. Please see [README](https://github.com/Interhyp/metadata-service/blob/main/README.md) for details. **CLIENTS MUST READ!**

API version: v1
Contact: somebody@some-organisation.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RepositoryConfigurationDtoMergeConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RepositoryConfigurationDtoMergeConfig{}

// RepositoryConfigurationDtoMergeConfig struct for RepositoryConfigurationDtoMergeConfig
type RepositoryConfigurationDtoMergeConfig struct {
	DefaultStrategy *MergeStrategy `json:"defaultStrategy,omitempty"`
	Strategies []MergeStrategy `json:"strategies,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RepositoryConfigurationDtoMergeConfig RepositoryConfigurationDtoMergeConfig

// NewRepositoryConfigurationDtoMergeConfig instantiates a new RepositoryConfigurationDtoMergeConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepositoryConfigurationDtoMergeConfig() *RepositoryConfigurationDtoMergeConfig {
	this := RepositoryConfigurationDtoMergeConfig{}
	return &this
}

// NewRepositoryConfigurationDtoMergeConfigWithDefaults instantiates a new RepositoryConfigurationDtoMergeConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepositoryConfigurationDtoMergeConfigWithDefaults() *RepositoryConfigurationDtoMergeConfig {
	this := RepositoryConfigurationDtoMergeConfig{}
	return &this
}

// GetDefaultStrategy returns the DefaultStrategy field value if set, zero value otherwise.
func (o *RepositoryConfigurationDtoMergeConfig) GetDefaultStrategy() MergeStrategy {
	if o == nil || IsNil(o.DefaultStrategy) {
		var ret MergeStrategy
		return ret
	}
	return *o.DefaultStrategy
}

// GetDefaultStrategyOk returns a tuple with the DefaultStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryConfigurationDtoMergeConfig) GetDefaultStrategyOk() (*MergeStrategy, bool) {
	if o == nil || IsNil(o.DefaultStrategy) {
		return nil, false
	}
	return o.DefaultStrategy, true
}

// HasDefaultStrategy returns a boolean if a field has been set.
func (o *RepositoryConfigurationDtoMergeConfig) HasDefaultStrategy() bool {
	if o != nil && !IsNil(o.DefaultStrategy) {
		return true
	}

	return false
}

// SetDefaultStrategy gets a reference to the given MergeStrategy and assigns it to the DefaultStrategy field.
func (o *RepositoryConfigurationDtoMergeConfig) SetDefaultStrategy(v MergeStrategy) {
	o.DefaultStrategy = &v
}

// GetStrategies returns the Strategies field value if set, zero value otherwise.
func (o *RepositoryConfigurationDtoMergeConfig) GetStrategies() []MergeStrategy {
	if o == nil || IsNil(o.Strategies) {
		var ret []MergeStrategy
		return ret
	}
	return o.Strategies
}

// GetStrategiesOk returns a tuple with the Strategies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryConfigurationDtoMergeConfig) GetStrategiesOk() ([]MergeStrategy, bool) {
	if o == nil || IsNil(o.Strategies) {
		return nil, false
	}
	return o.Strategies, true
}

// HasStrategies returns a boolean if a field has been set.
func (o *RepositoryConfigurationDtoMergeConfig) HasStrategies() bool {
	if o != nil && !IsNil(o.Strategies) {
		return true
	}

	return false
}

// SetStrategies gets a reference to the given []MergeStrategy and assigns it to the Strategies field.
func (o *RepositoryConfigurationDtoMergeConfig) SetStrategies(v []MergeStrategy) {
	o.Strategies = v
}

func (o RepositoryConfigurationDtoMergeConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RepositoryConfigurationDtoMergeConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DefaultStrategy) {
		toSerialize["defaultStrategy"] = o.DefaultStrategy
	}
	if !IsNil(o.Strategies) {
		toSerialize["strategies"] = o.Strategies
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RepositoryConfigurationDtoMergeConfig) UnmarshalJSON(data []byte) (err error) {
	varRepositoryConfigurationDtoMergeConfig := _RepositoryConfigurationDtoMergeConfig{}

	err = json.Unmarshal(data, &varRepositoryConfigurationDtoMergeConfig)

	if err != nil {
		return err
	}

	*o = RepositoryConfigurationDtoMergeConfig(varRepositoryConfigurationDtoMergeConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "defaultStrategy")
		delete(additionalProperties, "strategies")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRepositoryConfigurationDtoMergeConfig struct {
	value *RepositoryConfigurationDtoMergeConfig
	isSet bool
}

func (v NullableRepositoryConfigurationDtoMergeConfig) Get() *RepositoryConfigurationDtoMergeConfig {
	return v.value
}

func (v *NullableRepositoryConfigurationDtoMergeConfig) Set(val *RepositoryConfigurationDtoMergeConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRepositoryConfigurationDtoMergeConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRepositoryConfigurationDtoMergeConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepositoryConfigurationDtoMergeConfig(val *RepositoryConfigurationDtoMergeConfig) *NullableRepositoryConfigurationDtoMergeConfig {
	return &NullableRepositoryConfigurationDtoMergeConfig{value: val, isSet: true}
}

func (v NullableRepositoryConfigurationDtoMergeConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepositoryConfigurationDtoMergeConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


