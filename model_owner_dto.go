/*
Metadata

Obtain and manage metadata for owners, services, repositories. Please see [README](https://github.com/Interhyp/metadata-service/blob/main/README.md) for details. **CLIENTS MUST READ!**

API version: v1
Contact: somebody@some-organisation.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the OwnerDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OwnerDto{}

// OwnerDto struct for OwnerDto
type OwnerDto struct {
	// The contact information of the owner
	Contact string `json:"contact"`
	// The teams channel url information of the owner
	TeamsChannelURL *string `json:"teamsChannelURL,omitempty"`
	// The product owner of this owner space
	ProductOwner *string `json:"productOwner,omitempty"`
	// A list of users which constitute this owner
	Members []string `json:"members,omitempty"`
	// Collection of arbitrary user groups which can be referenced in service configurations. Map of string (group name e.g. some-owner) of strings (list of usernames), one username for each group is required.
	Groups map[string][]string `json:"groups,omitempty"`
	// A list of users that are allowed to promote services in this owner space
	Promoters []string `json:"promoters,omitempty"`
	// The default jira project that is used by this owner space
	DefaultJiraProject *string `json:"defaultJiraProject,omitempty"`
	// ISO-8601 UTC date time at which this information was originally committed. When sending an update, include the original timestamp you got so we can detect concurrent updates.
	TimeStamp string `json:"timeStamp"`
	// The git commit hash this information was originally committed under. When sending an update, include the original commitHash you got so we can detect concurrent updates.
	CommitHash string `json:"commitHash"`
	// The jira issue to use for committing a change, or the last jira issue used.
	JiraIssue string `json:"jiraIssue"`
	// A display name of the owner, to be presented in user interfaces instead of the owner's name, when available
	DisplayName *string `json:"displayName,omitempty"`
	Links []Link `json:"links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OwnerDto OwnerDto

// NewOwnerDto instantiates a new OwnerDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOwnerDto(contact string, timeStamp string, commitHash string, jiraIssue string) *OwnerDto {
	this := OwnerDto{}
	this.Contact = contact
	this.TimeStamp = timeStamp
	this.CommitHash = commitHash
	this.JiraIssue = jiraIssue
	return &this
}

// NewOwnerDtoWithDefaults instantiates a new OwnerDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOwnerDtoWithDefaults() *OwnerDto {
	this := OwnerDto{}
	return &this
}

// GetContact returns the Contact field value
func (o *OwnerDto) GetContact() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Contact
}

// GetContactOk returns a tuple with the Contact field value
// and a boolean to check if the value has been set.
func (o *OwnerDto) GetContactOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Contact, true
}

// SetContact sets field value
func (o *OwnerDto) SetContact(v string) {
	o.Contact = v
}

// GetTeamsChannelURL returns the TeamsChannelURL field value if set, zero value otherwise.
func (o *OwnerDto) GetTeamsChannelURL() string {
	if o == nil || IsNil(o.TeamsChannelURL) {
		var ret string
		return ret
	}
	return *o.TeamsChannelURL
}

// GetTeamsChannelURLOk returns a tuple with the TeamsChannelURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OwnerDto) GetTeamsChannelURLOk() (*string, bool) {
	if o == nil || IsNil(o.TeamsChannelURL) {
		return nil, false
	}
	return o.TeamsChannelURL, true
}

// HasTeamsChannelURL returns a boolean if a field has been set.
func (o *OwnerDto) HasTeamsChannelURL() bool {
	if o != nil && !IsNil(o.TeamsChannelURL) {
		return true
	}

	return false
}

// SetTeamsChannelURL gets a reference to the given string and assigns it to the TeamsChannelURL field.
func (o *OwnerDto) SetTeamsChannelURL(v string) {
	o.TeamsChannelURL = &v
}

// GetProductOwner returns the ProductOwner field value if set, zero value otherwise.
func (o *OwnerDto) GetProductOwner() string {
	if o == nil || IsNil(o.ProductOwner) {
		var ret string
		return ret
	}
	return *o.ProductOwner
}

// GetProductOwnerOk returns a tuple with the ProductOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OwnerDto) GetProductOwnerOk() (*string, bool) {
	if o == nil || IsNil(o.ProductOwner) {
		return nil, false
	}
	return o.ProductOwner, true
}

// HasProductOwner returns a boolean if a field has been set.
func (o *OwnerDto) HasProductOwner() bool {
	if o != nil && !IsNil(o.ProductOwner) {
		return true
	}

	return false
}

// SetProductOwner gets a reference to the given string and assigns it to the ProductOwner field.
func (o *OwnerDto) SetProductOwner(v string) {
	o.ProductOwner = &v
}

// GetMembers returns the Members field value if set, zero value otherwise.
func (o *OwnerDto) GetMembers() []string {
	if o == nil || IsNil(o.Members) {
		var ret []string
		return ret
	}
	return o.Members
}

// GetMembersOk returns a tuple with the Members field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OwnerDto) GetMembersOk() ([]string, bool) {
	if o == nil || IsNil(o.Members) {
		return nil, false
	}
	return o.Members, true
}

// HasMembers returns a boolean if a field has been set.
func (o *OwnerDto) HasMembers() bool {
	if o != nil && !IsNil(o.Members) {
		return true
	}

	return false
}

// SetMembers gets a reference to the given []string and assigns it to the Members field.
func (o *OwnerDto) SetMembers(v []string) {
	o.Members = v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *OwnerDto) GetGroups() map[string][]string {
	if o == nil || IsNil(o.Groups) {
		var ret map[string][]string
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OwnerDto) GetGroupsOk() (map[string][]string, bool) {
	if o == nil || IsNil(o.Groups) {
		return map[string][]string{}, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *OwnerDto) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given map[string][]string and assigns it to the Groups field.
func (o *OwnerDto) SetGroups(v map[string][]string) {
	o.Groups = v
}

// GetPromoters returns the Promoters field value if set, zero value otherwise.
func (o *OwnerDto) GetPromoters() []string {
	if o == nil || IsNil(o.Promoters) {
		var ret []string
		return ret
	}
	return o.Promoters
}

// GetPromotersOk returns a tuple with the Promoters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OwnerDto) GetPromotersOk() ([]string, bool) {
	if o == nil || IsNil(o.Promoters) {
		return nil, false
	}
	return o.Promoters, true
}

// HasPromoters returns a boolean if a field has been set.
func (o *OwnerDto) HasPromoters() bool {
	if o != nil && !IsNil(o.Promoters) {
		return true
	}

	return false
}

// SetPromoters gets a reference to the given []string and assigns it to the Promoters field.
func (o *OwnerDto) SetPromoters(v []string) {
	o.Promoters = v
}

// GetDefaultJiraProject returns the DefaultJiraProject field value if set, zero value otherwise.
func (o *OwnerDto) GetDefaultJiraProject() string {
	if o == nil || IsNil(o.DefaultJiraProject) {
		var ret string
		return ret
	}
	return *o.DefaultJiraProject
}

// GetDefaultJiraProjectOk returns a tuple with the DefaultJiraProject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OwnerDto) GetDefaultJiraProjectOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultJiraProject) {
		return nil, false
	}
	return o.DefaultJiraProject, true
}

// HasDefaultJiraProject returns a boolean if a field has been set.
func (o *OwnerDto) HasDefaultJiraProject() bool {
	if o != nil && !IsNil(o.DefaultJiraProject) {
		return true
	}

	return false
}

// SetDefaultJiraProject gets a reference to the given string and assigns it to the DefaultJiraProject field.
func (o *OwnerDto) SetDefaultJiraProject(v string) {
	o.DefaultJiraProject = &v
}

// GetTimeStamp returns the TimeStamp field value
func (o *OwnerDto) GetTimeStamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimeStamp
}

// GetTimeStampOk returns a tuple with the TimeStamp field value
// and a boolean to check if the value has been set.
func (o *OwnerDto) GetTimeStampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeStamp, true
}

// SetTimeStamp sets field value
func (o *OwnerDto) SetTimeStamp(v string) {
	o.TimeStamp = v
}

// GetCommitHash returns the CommitHash field value
func (o *OwnerDto) GetCommitHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommitHash
}

// GetCommitHashOk returns a tuple with the CommitHash field value
// and a boolean to check if the value has been set.
func (o *OwnerDto) GetCommitHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommitHash, true
}

// SetCommitHash sets field value
func (o *OwnerDto) SetCommitHash(v string) {
	o.CommitHash = v
}

// GetJiraIssue returns the JiraIssue field value
func (o *OwnerDto) GetJiraIssue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.JiraIssue
}

// GetJiraIssueOk returns a tuple with the JiraIssue field value
// and a boolean to check if the value has been set.
func (o *OwnerDto) GetJiraIssueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JiraIssue, true
}

// SetJiraIssue sets field value
func (o *OwnerDto) SetJiraIssue(v string) {
	o.JiraIssue = v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *OwnerDto) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OwnerDto) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *OwnerDto) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *OwnerDto) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *OwnerDto) GetLinks() []Link {
	if o == nil || IsNil(o.Links) {
		var ret []Link
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OwnerDto) GetLinksOk() ([]Link, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *OwnerDto) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []Link and assigns it to the Links field.
func (o *OwnerDto) SetLinks(v []Link) {
	o.Links = v
}

func (o OwnerDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OwnerDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["contact"] = o.Contact
	if !IsNil(o.TeamsChannelURL) {
		toSerialize["teamsChannelURL"] = o.TeamsChannelURL
	}
	if !IsNil(o.ProductOwner) {
		toSerialize["productOwner"] = o.ProductOwner
	}
	if !IsNil(o.Members) {
		toSerialize["members"] = o.Members
	}
	if !IsNil(o.Groups) {
		toSerialize["groups"] = o.Groups
	}
	if !IsNil(o.Promoters) {
		toSerialize["promoters"] = o.Promoters
	}
	if !IsNil(o.DefaultJiraProject) {
		toSerialize["defaultJiraProject"] = o.DefaultJiraProject
	}
	toSerialize["timeStamp"] = o.TimeStamp
	toSerialize["commitHash"] = o.CommitHash
	toSerialize["jiraIssue"] = o.JiraIssue
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OwnerDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"contact",
		"timeStamp",
		"commitHash",
		"jiraIssue",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOwnerDto := _OwnerDto{}

	err = json.Unmarshal(data, &varOwnerDto)

	if err != nil {
		return err
	}

	*o = OwnerDto(varOwnerDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "contact")
		delete(additionalProperties, "teamsChannelURL")
		delete(additionalProperties, "productOwner")
		delete(additionalProperties, "members")
		delete(additionalProperties, "groups")
		delete(additionalProperties, "promoters")
		delete(additionalProperties, "defaultJiraProject")
		delete(additionalProperties, "timeStamp")
		delete(additionalProperties, "commitHash")
		delete(additionalProperties, "jiraIssue")
		delete(additionalProperties, "displayName")
		delete(additionalProperties, "links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOwnerDto struct {
	value *OwnerDto
	isSet bool
}

func (v NullableOwnerDto) Get() *OwnerDto {
	return v.value
}

func (v *NullableOwnerDto) Set(val *OwnerDto) {
	v.value = val
	v.isSet = true
}

func (v NullableOwnerDto) IsSet() bool {
	return v.isSet
}

func (v *NullableOwnerDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOwnerDto(val *OwnerDto) *NullableOwnerDto {
	return &NullableOwnerDto{value: val, isSet: true}
}

func (v NullableOwnerDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOwnerDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


