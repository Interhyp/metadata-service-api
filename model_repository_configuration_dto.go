/*
Metadata

Obtain and manage metadata for owners, services, repositories. Please see [README](https://github.com/Interhyp/metadata-service/blob/main/README.md) for details. **CLIENTS MUST READ!**

API version: v1
Contact: somebody@some-organisation.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RepositoryConfigurationDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RepositoryConfigurationDto{}

// RepositoryConfigurationDto Attributes to configure the repository. If a configuration exists there are also some configured defaults for the repository.
type RepositoryConfigurationDto struct {
	// Ssh-Keys configured on the repository.
	AccessKeys []RepositoryConfigurationAccessKeyDto `json:"accessKeys,omitempty"`
	MergeConfig *RepositoryConfigurationDtoMergeConfig `json:"mergeConfig,omitempty"`
	DefaultTasks []RepositoryConfigurationDefaultTaskDto `json:"defaultTasks,omitempty"`
	// Use an explicit branch name regex.
	BranchNameRegex *string `json:"branchNameRegex,omitempty"`
	// Use an explicit commit message regex.
	CommitMessageRegex *string `json:"commitMessageRegex,omitempty"`
	// Adds a corresponding commit message regex.
	CommitMessageType *string `json:"commitMessageType,omitempty"`
	// Set the required successful builds counter.
	RequireSuccessfulBuilds *int32 `json:"requireSuccessfulBuilds,omitempty"`
	// Set the required approvals counter.
	RequireApprovals *int32 `json:"requireApprovals,omitempty"`
	// Exclude merge commits from commit checks.
	ExcludeMergeCommits *bool `json:"excludeMergeCommits,omitempty"`
	// Exclude users from commit checks.
	ExcludeMergeCheckUsers []ExcludeMergeCheckUserDto `json:"excludeMergeCheckUsers,omitempty"`
	Webhooks *RepositoryConfigurationWebhooksDto `json:"webhooks,omitempty"`
	// Map of string (group name e.g. some-owner) of strings (list of approvers), one approval for each group is required.
	Approvers map[string][]string `json:"approvers,omitempty"`
	// Raw data of approvers
	RawApprovers map[string][]string `json:"rawApprovers,omitempty"`
	// List of strings (list of watchers, either usernames or group identifier), which are added as reviewers but require no approval.
	Watchers []string `json:"watchers,omitempty"`
	// Raw data of watchers
	RawWatchers []string `json:"rawWatchers,omitempty"`
	// Moves the repository into the archive.
	Archived *bool `json:"archived,omitempty"`
	// Repository will not be configured, also not archived.
	Unmanaged *bool `json:"unmanaged,omitempty"`
	RefProtections *RefProtections `json:"refProtections,omitempty"`
	PullRequests *PullRequests `json:"pullRequests,omitempty"`
	// Configures JQL matcher with query: issuetype in (Story, Bug) AND 'Risk Level' is not EMPTY
	RequireIssue *bool `json:"requireIssue,omitempty"`
	// Configuration of conditional builds as map of structs (key name e.g. some-key) of target references.
	RequireConditions map[string]ConditionReferenceDto `json:"requireConditions,omitempty"`
	// Control how the repository is used by GitHub Actions workflows in other repositories
	ActionsAccess *string `json:"actionsAccess,omitempty"`
	// Custom properties for this repository
	CustomProperties map[string]interface{} `json:"customProperties,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RepositoryConfigurationDto RepositoryConfigurationDto

// NewRepositoryConfigurationDto instantiates a new RepositoryConfigurationDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepositoryConfigurationDto() *RepositoryConfigurationDto {
	this := RepositoryConfigurationDto{}
	return &this
}

// NewRepositoryConfigurationDtoWithDefaults instantiates a new RepositoryConfigurationDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepositoryConfigurationDtoWithDefaults() *RepositoryConfigurationDto {
	this := RepositoryConfigurationDto{}
	return &this
}

// GetAccessKeys returns the AccessKeys field value if set, zero value otherwise.
func (o *RepositoryConfigurationDto) GetAccessKeys() []RepositoryConfigurationAccessKeyDto {
	if o == nil || IsNil(o.AccessKeys) {
		var ret []RepositoryConfigurationAccessKeyDto
		return ret
	}
	return o.AccessKeys
}

// GetAccessKeysOk returns a tuple with the AccessKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryConfigurationDto) GetAccessKeysOk() ([]RepositoryConfigurationAccessKeyDto, bool) {
	if o == nil || IsNil(o.AccessKeys) {
		return nil, false
	}
	return o.AccessKeys, true
}

// HasAccessKeys returns a boolean if a field has been set.
func (o *RepositoryConfigurationDto) HasAccessKeys() bool {
	if o != nil && !IsNil(o.AccessKeys) {
		return true
	}

	return false
}

// SetAccessKeys gets a reference to the given []RepositoryConfigurationAccessKeyDto and assigns it to the AccessKeys field.
func (o *RepositoryConfigurationDto) SetAccessKeys(v []RepositoryConfigurationAccessKeyDto) {
	o.AccessKeys = v
}

// GetMergeConfig returns the MergeConfig field value if set, zero value otherwise.
func (o *RepositoryConfigurationDto) GetMergeConfig() RepositoryConfigurationDtoMergeConfig {
	if o == nil || IsNil(o.MergeConfig) {
		var ret RepositoryConfigurationDtoMergeConfig
		return ret
	}
	return *o.MergeConfig
}

// GetMergeConfigOk returns a tuple with the MergeConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryConfigurationDto) GetMergeConfigOk() (*RepositoryConfigurationDtoMergeConfig, bool) {
	if o == nil || IsNil(o.MergeConfig) {
		return nil, false
	}
	return o.MergeConfig, true
}

// HasMergeConfig returns a boolean if a field has been set.
func (o *RepositoryConfigurationDto) HasMergeConfig() bool {
	if o != nil && !IsNil(o.MergeConfig) {
		return true
	}

	return false
}

// SetMergeConfig gets a reference to the given RepositoryConfigurationDtoMergeConfig and assigns it to the MergeConfig field.
func (o *RepositoryConfigurationDto) SetMergeConfig(v RepositoryConfigurationDtoMergeConfig) {
	o.MergeConfig = &v
}

// GetDefaultTasks returns the DefaultTasks field value if set, zero value otherwise.
func (o *RepositoryConfigurationDto) GetDefaultTasks() []RepositoryConfigurationDefaultTaskDto {
	if o == nil || IsNil(o.DefaultTasks) {
		var ret []RepositoryConfigurationDefaultTaskDto
		return ret
	}
	return o.DefaultTasks
}

// GetDefaultTasksOk returns a tuple with the DefaultTasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryConfigurationDto) GetDefaultTasksOk() ([]RepositoryConfigurationDefaultTaskDto, bool) {
	if o == nil || IsNil(o.DefaultTasks) {
		return nil, false
	}
	return o.DefaultTasks, true
}

// HasDefaultTasks returns a boolean if a field has been set.
func (o *RepositoryConfigurationDto) HasDefaultTasks() bool {
	if o != nil && !IsNil(o.DefaultTasks) {
		return true
	}

	return false
}

// SetDefaultTasks gets a reference to the given []RepositoryConfigurationDefaultTaskDto and assigns it to the DefaultTasks field.
func (o *RepositoryConfigurationDto) SetDefaultTasks(v []RepositoryConfigurationDefaultTaskDto) {
	o.DefaultTasks = v
}

// GetBranchNameRegex returns the BranchNameRegex field value if set, zero value otherwise.
func (o *RepositoryConfigurationDto) GetBranchNameRegex() string {
	if o == nil || IsNil(o.BranchNameRegex) {
		var ret string
		return ret
	}
	return *o.BranchNameRegex
}

// GetBranchNameRegexOk returns a tuple with the BranchNameRegex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryConfigurationDto) GetBranchNameRegexOk() (*string, bool) {
	if o == nil || IsNil(o.BranchNameRegex) {
		return nil, false
	}
	return o.BranchNameRegex, true
}

// HasBranchNameRegex returns a boolean if a field has been set.
func (o *RepositoryConfigurationDto) HasBranchNameRegex() bool {
	if o != nil && !IsNil(o.BranchNameRegex) {
		return true
	}

	return false
}

// SetBranchNameRegex gets a reference to the given string and assigns it to the BranchNameRegex field.
func (o *RepositoryConfigurationDto) SetBranchNameRegex(v string) {
	o.BranchNameRegex = &v
}

// GetCommitMessageRegex returns the CommitMessageRegex field value if set, zero value otherwise.
func (o *RepositoryConfigurationDto) GetCommitMessageRegex() string {
	if o == nil || IsNil(o.CommitMessageRegex) {
		var ret string
		return ret
	}
	return *o.CommitMessageRegex
}

// GetCommitMessageRegexOk returns a tuple with the CommitMessageRegex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryConfigurationDto) GetCommitMessageRegexOk() (*string, bool) {
	if o == nil || IsNil(o.CommitMessageRegex) {
		return nil, false
	}
	return o.CommitMessageRegex, true
}

// HasCommitMessageRegex returns a boolean if a field has been set.
func (o *RepositoryConfigurationDto) HasCommitMessageRegex() bool {
	if o != nil && !IsNil(o.CommitMessageRegex) {
		return true
	}

	return false
}

// SetCommitMessageRegex gets a reference to the given string and assigns it to the CommitMessageRegex field.
func (o *RepositoryConfigurationDto) SetCommitMessageRegex(v string) {
	o.CommitMessageRegex = &v
}

// GetCommitMessageType returns the CommitMessageType field value if set, zero value otherwise.
func (o *RepositoryConfigurationDto) GetCommitMessageType() string {
	if o == nil || IsNil(o.CommitMessageType) {
		var ret string
		return ret
	}
	return *o.CommitMessageType
}

// GetCommitMessageTypeOk returns a tuple with the CommitMessageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryConfigurationDto) GetCommitMessageTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CommitMessageType) {
		return nil, false
	}
	return o.CommitMessageType, true
}

// HasCommitMessageType returns a boolean if a field has been set.
func (o *RepositoryConfigurationDto) HasCommitMessageType() bool {
	if o != nil && !IsNil(o.CommitMessageType) {
		return true
	}

	return false
}

// SetCommitMessageType gets a reference to the given string and assigns it to the CommitMessageType field.
func (o *RepositoryConfigurationDto) SetCommitMessageType(v string) {
	o.CommitMessageType = &v
}

// GetRequireSuccessfulBuilds returns the RequireSuccessfulBuilds field value if set, zero value otherwise.
func (o *RepositoryConfigurationDto) GetRequireSuccessfulBuilds() int32 {
	if o == nil || IsNil(o.RequireSuccessfulBuilds) {
		var ret int32
		return ret
	}
	return *o.RequireSuccessfulBuilds
}

// GetRequireSuccessfulBuildsOk returns a tuple with the RequireSuccessfulBuilds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryConfigurationDto) GetRequireSuccessfulBuildsOk() (*int32, bool) {
	if o == nil || IsNil(o.RequireSuccessfulBuilds) {
		return nil, false
	}
	return o.RequireSuccessfulBuilds, true
}

// HasRequireSuccessfulBuilds returns a boolean if a field has been set.
func (o *RepositoryConfigurationDto) HasRequireSuccessfulBuilds() bool {
	if o != nil && !IsNil(o.RequireSuccessfulBuilds) {
		return true
	}

	return false
}

// SetRequireSuccessfulBuilds gets a reference to the given int32 and assigns it to the RequireSuccessfulBuilds field.
func (o *RepositoryConfigurationDto) SetRequireSuccessfulBuilds(v int32) {
	o.RequireSuccessfulBuilds = &v
}

// GetRequireApprovals returns the RequireApprovals field value if set, zero value otherwise.
func (o *RepositoryConfigurationDto) GetRequireApprovals() int32 {
	if o == nil || IsNil(o.RequireApprovals) {
		var ret int32
		return ret
	}
	return *o.RequireApprovals
}

// GetRequireApprovalsOk returns a tuple with the RequireApprovals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryConfigurationDto) GetRequireApprovalsOk() (*int32, bool) {
	if o == nil || IsNil(o.RequireApprovals) {
		return nil, false
	}
	return o.RequireApprovals, true
}

// HasRequireApprovals returns a boolean if a field has been set.
func (o *RepositoryConfigurationDto) HasRequireApprovals() bool {
	if o != nil && !IsNil(o.RequireApprovals) {
		return true
	}

	return false
}

// SetRequireApprovals gets a reference to the given int32 and assigns it to the RequireApprovals field.
func (o *RepositoryConfigurationDto) SetRequireApprovals(v int32) {
	o.RequireApprovals = &v
}

// GetExcludeMergeCommits returns the ExcludeMergeCommits field value if set, zero value otherwise.
func (o *RepositoryConfigurationDto) GetExcludeMergeCommits() bool {
	if o == nil || IsNil(o.ExcludeMergeCommits) {
		var ret bool
		return ret
	}
	return *o.ExcludeMergeCommits
}

// GetExcludeMergeCommitsOk returns a tuple with the ExcludeMergeCommits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryConfigurationDto) GetExcludeMergeCommitsOk() (*bool, bool) {
	if o == nil || IsNil(o.ExcludeMergeCommits) {
		return nil, false
	}
	return o.ExcludeMergeCommits, true
}

// HasExcludeMergeCommits returns a boolean if a field has been set.
func (o *RepositoryConfigurationDto) HasExcludeMergeCommits() bool {
	if o != nil && !IsNil(o.ExcludeMergeCommits) {
		return true
	}

	return false
}

// SetExcludeMergeCommits gets a reference to the given bool and assigns it to the ExcludeMergeCommits field.
func (o *RepositoryConfigurationDto) SetExcludeMergeCommits(v bool) {
	o.ExcludeMergeCommits = &v
}

// GetExcludeMergeCheckUsers returns the ExcludeMergeCheckUsers field value if set, zero value otherwise.
func (o *RepositoryConfigurationDto) GetExcludeMergeCheckUsers() []ExcludeMergeCheckUserDto {
	if o == nil || IsNil(o.ExcludeMergeCheckUsers) {
		var ret []ExcludeMergeCheckUserDto
		return ret
	}
	return o.ExcludeMergeCheckUsers
}

// GetExcludeMergeCheckUsersOk returns a tuple with the ExcludeMergeCheckUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryConfigurationDto) GetExcludeMergeCheckUsersOk() ([]ExcludeMergeCheckUserDto, bool) {
	if o == nil || IsNil(o.ExcludeMergeCheckUsers) {
		return nil, false
	}
	return o.ExcludeMergeCheckUsers, true
}

// HasExcludeMergeCheckUsers returns a boolean if a field has been set.
func (o *RepositoryConfigurationDto) HasExcludeMergeCheckUsers() bool {
	if o != nil && !IsNil(o.ExcludeMergeCheckUsers) {
		return true
	}

	return false
}

// SetExcludeMergeCheckUsers gets a reference to the given []ExcludeMergeCheckUserDto and assigns it to the ExcludeMergeCheckUsers field.
func (o *RepositoryConfigurationDto) SetExcludeMergeCheckUsers(v []ExcludeMergeCheckUserDto) {
	o.ExcludeMergeCheckUsers = v
}

// GetWebhooks returns the Webhooks field value if set, zero value otherwise.
func (o *RepositoryConfigurationDto) GetWebhooks() RepositoryConfigurationWebhooksDto {
	if o == nil || IsNil(o.Webhooks) {
		var ret RepositoryConfigurationWebhooksDto
		return ret
	}
	return *o.Webhooks
}

// GetWebhooksOk returns a tuple with the Webhooks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryConfigurationDto) GetWebhooksOk() (*RepositoryConfigurationWebhooksDto, bool) {
	if o == nil || IsNil(o.Webhooks) {
		return nil, false
	}
	return o.Webhooks, true
}

// HasWebhooks returns a boolean if a field has been set.
func (o *RepositoryConfigurationDto) HasWebhooks() bool {
	if o != nil && !IsNil(o.Webhooks) {
		return true
	}

	return false
}

// SetWebhooks gets a reference to the given RepositoryConfigurationWebhooksDto and assigns it to the Webhooks field.
func (o *RepositoryConfigurationDto) SetWebhooks(v RepositoryConfigurationWebhooksDto) {
	o.Webhooks = &v
}

// GetApprovers returns the Approvers field value if set, zero value otherwise.
func (o *RepositoryConfigurationDto) GetApprovers() map[string][]string {
	if o == nil || IsNil(o.Approvers) {
		var ret map[string][]string
		return ret
	}
	return o.Approvers
}

// GetApproversOk returns a tuple with the Approvers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryConfigurationDto) GetApproversOk() (map[string][]string, bool) {
	if o == nil || IsNil(o.Approvers) {
		return map[string][]string{}, false
	}
	return o.Approvers, true
}

// HasApprovers returns a boolean if a field has been set.
func (o *RepositoryConfigurationDto) HasApprovers() bool {
	if o != nil && !IsNil(o.Approvers) {
		return true
	}

	return false
}

// SetApprovers gets a reference to the given map[string][]string and assigns it to the Approvers field.
func (o *RepositoryConfigurationDto) SetApprovers(v map[string][]string) {
	o.Approvers = v
}

// GetRawApprovers returns the RawApprovers field value if set, zero value otherwise.
func (o *RepositoryConfigurationDto) GetRawApprovers() map[string][]string {
	if o == nil || IsNil(o.RawApprovers) {
		var ret map[string][]string
		return ret
	}
	return o.RawApprovers
}

// GetRawApproversOk returns a tuple with the RawApprovers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryConfigurationDto) GetRawApproversOk() (map[string][]string, bool) {
	if o == nil || IsNil(o.RawApprovers) {
		return map[string][]string{}, false
	}
	return o.RawApprovers, true
}

// HasRawApprovers returns a boolean if a field has been set.
func (o *RepositoryConfigurationDto) HasRawApprovers() bool {
	if o != nil && !IsNil(o.RawApprovers) {
		return true
	}

	return false
}

// SetRawApprovers gets a reference to the given map[string][]string and assigns it to the RawApprovers field.
func (o *RepositoryConfigurationDto) SetRawApprovers(v map[string][]string) {
	o.RawApprovers = v
}

// GetWatchers returns the Watchers field value if set, zero value otherwise.
func (o *RepositoryConfigurationDto) GetWatchers() []string {
	if o == nil || IsNil(o.Watchers) {
		var ret []string
		return ret
	}
	return o.Watchers
}

// GetWatchersOk returns a tuple with the Watchers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryConfigurationDto) GetWatchersOk() ([]string, bool) {
	if o == nil || IsNil(o.Watchers) {
		return nil, false
	}
	return o.Watchers, true
}

// HasWatchers returns a boolean if a field has been set.
func (o *RepositoryConfigurationDto) HasWatchers() bool {
	if o != nil && !IsNil(o.Watchers) {
		return true
	}

	return false
}

// SetWatchers gets a reference to the given []string and assigns it to the Watchers field.
func (o *RepositoryConfigurationDto) SetWatchers(v []string) {
	o.Watchers = v
}

// GetRawWatchers returns the RawWatchers field value if set, zero value otherwise.
func (o *RepositoryConfigurationDto) GetRawWatchers() []string {
	if o == nil || IsNil(o.RawWatchers) {
		var ret []string
		return ret
	}
	return o.RawWatchers
}

// GetRawWatchersOk returns a tuple with the RawWatchers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryConfigurationDto) GetRawWatchersOk() ([]string, bool) {
	if o == nil || IsNil(o.RawWatchers) {
		return nil, false
	}
	return o.RawWatchers, true
}

// HasRawWatchers returns a boolean if a field has been set.
func (o *RepositoryConfigurationDto) HasRawWatchers() bool {
	if o != nil && !IsNil(o.RawWatchers) {
		return true
	}

	return false
}

// SetRawWatchers gets a reference to the given []string and assigns it to the RawWatchers field.
func (o *RepositoryConfigurationDto) SetRawWatchers(v []string) {
	o.RawWatchers = v
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *RepositoryConfigurationDto) GetArchived() bool {
	if o == nil || IsNil(o.Archived) {
		var ret bool
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryConfigurationDto) GetArchivedOk() (*bool, bool) {
	if o == nil || IsNil(o.Archived) {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *RepositoryConfigurationDto) HasArchived() bool {
	if o != nil && !IsNil(o.Archived) {
		return true
	}

	return false
}

// SetArchived gets a reference to the given bool and assigns it to the Archived field.
func (o *RepositoryConfigurationDto) SetArchived(v bool) {
	o.Archived = &v
}

// GetUnmanaged returns the Unmanaged field value if set, zero value otherwise.
func (o *RepositoryConfigurationDto) GetUnmanaged() bool {
	if o == nil || IsNil(o.Unmanaged) {
		var ret bool
		return ret
	}
	return *o.Unmanaged
}

// GetUnmanagedOk returns a tuple with the Unmanaged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryConfigurationDto) GetUnmanagedOk() (*bool, bool) {
	if o == nil || IsNil(o.Unmanaged) {
		return nil, false
	}
	return o.Unmanaged, true
}

// HasUnmanaged returns a boolean if a field has been set.
func (o *RepositoryConfigurationDto) HasUnmanaged() bool {
	if o != nil && !IsNil(o.Unmanaged) {
		return true
	}

	return false
}

// SetUnmanaged gets a reference to the given bool and assigns it to the Unmanaged field.
func (o *RepositoryConfigurationDto) SetUnmanaged(v bool) {
	o.Unmanaged = &v
}

// GetRefProtections returns the RefProtections field value if set, zero value otherwise.
func (o *RepositoryConfigurationDto) GetRefProtections() RefProtections {
	if o == nil || IsNil(o.RefProtections) {
		var ret RefProtections
		return ret
	}
	return *o.RefProtections
}

// GetRefProtectionsOk returns a tuple with the RefProtections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryConfigurationDto) GetRefProtectionsOk() (*RefProtections, bool) {
	if o == nil || IsNil(o.RefProtections) {
		return nil, false
	}
	return o.RefProtections, true
}

// HasRefProtections returns a boolean if a field has been set.
func (o *RepositoryConfigurationDto) HasRefProtections() bool {
	if o != nil && !IsNil(o.RefProtections) {
		return true
	}

	return false
}

// SetRefProtections gets a reference to the given RefProtections and assigns it to the RefProtections field.
func (o *RepositoryConfigurationDto) SetRefProtections(v RefProtections) {
	o.RefProtections = &v
}

// GetPullRequests returns the PullRequests field value if set, zero value otherwise.
func (o *RepositoryConfigurationDto) GetPullRequests() PullRequests {
	if o == nil || IsNil(o.PullRequests) {
		var ret PullRequests
		return ret
	}
	return *o.PullRequests
}

// GetPullRequestsOk returns a tuple with the PullRequests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryConfigurationDto) GetPullRequestsOk() (*PullRequests, bool) {
	if o == nil || IsNil(o.PullRequests) {
		return nil, false
	}
	return o.PullRequests, true
}

// HasPullRequests returns a boolean if a field has been set.
func (o *RepositoryConfigurationDto) HasPullRequests() bool {
	if o != nil && !IsNil(o.PullRequests) {
		return true
	}

	return false
}

// SetPullRequests gets a reference to the given PullRequests and assigns it to the PullRequests field.
func (o *RepositoryConfigurationDto) SetPullRequests(v PullRequests) {
	o.PullRequests = &v
}

// GetRequireIssue returns the RequireIssue field value if set, zero value otherwise.
func (o *RepositoryConfigurationDto) GetRequireIssue() bool {
	if o == nil || IsNil(o.RequireIssue) {
		var ret bool
		return ret
	}
	return *o.RequireIssue
}

// GetRequireIssueOk returns a tuple with the RequireIssue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryConfigurationDto) GetRequireIssueOk() (*bool, bool) {
	if o == nil || IsNil(o.RequireIssue) {
		return nil, false
	}
	return o.RequireIssue, true
}

// HasRequireIssue returns a boolean if a field has been set.
func (o *RepositoryConfigurationDto) HasRequireIssue() bool {
	if o != nil && !IsNil(o.RequireIssue) {
		return true
	}

	return false
}

// SetRequireIssue gets a reference to the given bool and assigns it to the RequireIssue field.
func (o *RepositoryConfigurationDto) SetRequireIssue(v bool) {
	o.RequireIssue = &v
}

// GetRequireConditions returns the RequireConditions field value if set, zero value otherwise.
func (o *RepositoryConfigurationDto) GetRequireConditions() map[string]ConditionReferenceDto {
	if o == nil || IsNil(o.RequireConditions) {
		var ret map[string]ConditionReferenceDto
		return ret
	}
	return o.RequireConditions
}

// GetRequireConditionsOk returns a tuple with the RequireConditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryConfigurationDto) GetRequireConditionsOk() (map[string]ConditionReferenceDto, bool) {
	if o == nil || IsNil(o.RequireConditions) {
		return map[string]ConditionReferenceDto{}, false
	}
	return o.RequireConditions, true
}

// HasRequireConditions returns a boolean if a field has been set.
func (o *RepositoryConfigurationDto) HasRequireConditions() bool {
	if o != nil && !IsNil(o.RequireConditions) {
		return true
	}

	return false
}

// SetRequireConditions gets a reference to the given map[string]ConditionReferenceDto and assigns it to the RequireConditions field.
func (o *RepositoryConfigurationDto) SetRequireConditions(v map[string]ConditionReferenceDto) {
	o.RequireConditions = v
}

// GetActionsAccess returns the ActionsAccess field value if set, zero value otherwise.
func (o *RepositoryConfigurationDto) GetActionsAccess() string {
	if o == nil || IsNil(o.ActionsAccess) {
		var ret string
		return ret
	}
	return *o.ActionsAccess
}

// GetActionsAccessOk returns a tuple with the ActionsAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryConfigurationDto) GetActionsAccessOk() (*string, bool) {
	if o == nil || IsNil(o.ActionsAccess) {
		return nil, false
	}
	return o.ActionsAccess, true
}

// HasActionsAccess returns a boolean if a field has been set.
func (o *RepositoryConfigurationDto) HasActionsAccess() bool {
	if o != nil && !IsNil(o.ActionsAccess) {
		return true
	}

	return false
}

// SetActionsAccess gets a reference to the given string and assigns it to the ActionsAccess field.
func (o *RepositoryConfigurationDto) SetActionsAccess(v string) {
	o.ActionsAccess = &v
}

// GetCustomProperties returns the CustomProperties field value if set, zero value otherwise.
func (o *RepositoryConfigurationDto) GetCustomProperties() map[string]interface{} {
	if o == nil || IsNil(o.CustomProperties) {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomProperties
}

// GetCustomPropertiesOk returns a tuple with the CustomProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryConfigurationDto) GetCustomPropertiesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomProperties) {
		return map[string]interface{}{}, false
	}
	return o.CustomProperties, true
}

// HasCustomProperties returns a boolean if a field has been set.
func (o *RepositoryConfigurationDto) HasCustomProperties() bool {
	if o != nil && !IsNil(o.CustomProperties) {
		return true
	}

	return false
}

// SetCustomProperties gets a reference to the given map[string]interface{} and assigns it to the CustomProperties field.
func (o *RepositoryConfigurationDto) SetCustomProperties(v map[string]interface{}) {
	o.CustomProperties = v
}

func (o RepositoryConfigurationDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RepositoryConfigurationDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessKeys) {
		toSerialize["accessKeys"] = o.AccessKeys
	}
	if !IsNil(o.MergeConfig) {
		toSerialize["mergeConfig"] = o.MergeConfig
	}
	if !IsNil(o.DefaultTasks) {
		toSerialize["defaultTasks"] = o.DefaultTasks
	}
	if !IsNil(o.BranchNameRegex) {
		toSerialize["branchNameRegex"] = o.BranchNameRegex
	}
	if !IsNil(o.CommitMessageRegex) {
		toSerialize["commitMessageRegex"] = o.CommitMessageRegex
	}
	if !IsNil(o.CommitMessageType) {
		toSerialize["commitMessageType"] = o.CommitMessageType
	}
	if !IsNil(o.RequireSuccessfulBuilds) {
		toSerialize["requireSuccessfulBuilds"] = o.RequireSuccessfulBuilds
	}
	if !IsNil(o.RequireApprovals) {
		toSerialize["requireApprovals"] = o.RequireApprovals
	}
	if !IsNil(o.ExcludeMergeCommits) {
		toSerialize["excludeMergeCommits"] = o.ExcludeMergeCommits
	}
	if !IsNil(o.ExcludeMergeCheckUsers) {
		toSerialize["excludeMergeCheckUsers"] = o.ExcludeMergeCheckUsers
	}
	if !IsNil(o.Webhooks) {
		toSerialize["webhooks"] = o.Webhooks
	}
	if !IsNil(o.Approvers) {
		toSerialize["approvers"] = o.Approvers
	}
	if !IsNil(o.RawApprovers) {
		toSerialize["rawApprovers"] = o.RawApprovers
	}
	if !IsNil(o.Watchers) {
		toSerialize["watchers"] = o.Watchers
	}
	if !IsNil(o.RawWatchers) {
		toSerialize["rawWatchers"] = o.RawWatchers
	}
	if !IsNil(o.Archived) {
		toSerialize["archived"] = o.Archived
	}
	if !IsNil(o.Unmanaged) {
		toSerialize["unmanaged"] = o.Unmanaged
	}
	if !IsNil(o.RefProtections) {
		toSerialize["refProtections"] = o.RefProtections
	}
	if !IsNil(o.PullRequests) {
		toSerialize["pullRequests"] = o.PullRequests
	}
	if !IsNil(o.RequireIssue) {
		toSerialize["requireIssue"] = o.RequireIssue
	}
	if !IsNil(o.RequireConditions) {
		toSerialize["requireConditions"] = o.RequireConditions
	}
	if !IsNil(o.ActionsAccess) {
		toSerialize["actionsAccess"] = o.ActionsAccess
	}
	if !IsNil(o.CustomProperties) {
		toSerialize["customProperties"] = o.CustomProperties
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RepositoryConfigurationDto) UnmarshalJSON(data []byte) (err error) {
	varRepositoryConfigurationDto := _RepositoryConfigurationDto{}

	err = json.Unmarshal(data, &varRepositoryConfigurationDto)

	if err != nil {
		return err
	}

	*o = RepositoryConfigurationDto(varRepositoryConfigurationDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "accessKeys")
		delete(additionalProperties, "mergeConfig")
		delete(additionalProperties, "defaultTasks")
		delete(additionalProperties, "branchNameRegex")
		delete(additionalProperties, "commitMessageRegex")
		delete(additionalProperties, "commitMessageType")
		delete(additionalProperties, "requireSuccessfulBuilds")
		delete(additionalProperties, "requireApprovals")
		delete(additionalProperties, "excludeMergeCommits")
		delete(additionalProperties, "excludeMergeCheckUsers")
		delete(additionalProperties, "webhooks")
		delete(additionalProperties, "approvers")
		delete(additionalProperties, "rawApprovers")
		delete(additionalProperties, "watchers")
		delete(additionalProperties, "rawWatchers")
		delete(additionalProperties, "archived")
		delete(additionalProperties, "unmanaged")
		delete(additionalProperties, "refProtections")
		delete(additionalProperties, "pullRequests")
		delete(additionalProperties, "requireIssue")
		delete(additionalProperties, "requireConditions")
		delete(additionalProperties, "actionsAccess")
		delete(additionalProperties, "customProperties")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRepositoryConfigurationDto struct {
	value *RepositoryConfigurationDto
	isSet bool
}

func (v NullableRepositoryConfigurationDto) Get() *RepositoryConfigurationDto {
	return v.value
}

func (v *NullableRepositoryConfigurationDto) Set(val *RepositoryConfigurationDto) {
	v.value = val
	v.isSet = true
}

func (v NullableRepositoryConfigurationDto) IsSet() bool {
	return v.isSet
}

func (v *NullableRepositoryConfigurationDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepositoryConfigurationDto(val *RepositoryConfigurationDto) *NullableRepositoryConfigurationDto {
	return &NullableRepositoryConfigurationDto{value: val, isSet: true}
}

func (v NullableRepositoryConfigurationDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepositoryConfigurationDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


