/*
Metadata

Obtain and manage metadata for owners, services, repositories. Please see [README](https://github.com/Interhyp/metadata-service/blob/main/README.md) for details. **CLIENTS MUST READ!**

API version: v1
Contact: somebody@some-organisation.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the OwnerListDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OwnerListDto{}

// OwnerListDto struct for OwnerListDto
type OwnerListDto struct {
	Owners map[string]OwnerDto `json:"owners"`
	// ISO-8601 UTC date time at which the list of owners was obtained from service-metadata
	TimeStamp string `json:"timeStamp" yaml:"-"`
	AdditionalProperties map[string]interface{}
}

type _OwnerListDto OwnerListDto

// NewOwnerListDto instantiates a new OwnerListDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOwnerListDto(owners map[string]OwnerDto, timeStamp string) *OwnerListDto {
	this := OwnerListDto{}
	this.Owners = owners
	this.TimeStamp = timeStamp
	return &this
}

// NewOwnerListDtoWithDefaults instantiates a new OwnerListDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOwnerListDtoWithDefaults() *OwnerListDto {
	this := OwnerListDto{}
	return &this
}

// GetOwners returns the Owners field value
func (o *OwnerListDto) GetOwners() map[string]OwnerDto {
	if o == nil {
		var ret map[string]OwnerDto
		return ret
	}

	return o.Owners
}

// GetOwnersOk returns a tuple with the Owners field value
// and a boolean to check if the value has been set.
func (o *OwnerListDto) GetOwnersOk() (map[string]OwnerDto, bool) {
	if o == nil {
		return map[string]OwnerDto{}, false
	}
	return o.Owners, true
}

// SetOwners sets field value
func (o *OwnerListDto) SetOwners(v map[string]OwnerDto) {
	o.Owners = v
}

// GetTimeStamp returns the TimeStamp field value
func (o *OwnerListDto) GetTimeStamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimeStamp
}

// GetTimeStampOk returns a tuple with the TimeStamp field value
// and a boolean to check if the value has been set.
func (o *OwnerListDto) GetTimeStampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeStamp, true
}

// SetTimeStamp sets field value
func (o *OwnerListDto) SetTimeStamp(v string) {
	o.TimeStamp = v
}

func (o OwnerListDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OwnerListDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["owners"] = o.Owners
	toSerialize["timeStamp"] = o.TimeStamp

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OwnerListDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"owners",
		"timeStamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOwnerListDto := _OwnerListDto{}

	err = json.Unmarshal(data, &varOwnerListDto)

	if err != nil {
		return err
	}

	*o = OwnerListDto(varOwnerListDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "owners")
		delete(additionalProperties, "timeStamp")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOwnerListDto struct {
	value *OwnerListDto
	isSet bool
}

func (v NullableOwnerListDto) Get() *OwnerListDto {
	return v.value
}

func (v *NullableOwnerListDto) Set(val *OwnerListDto) {
	v.value = val
	v.isSet = true
}

func (v NullableOwnerListDto) IsSet() bool {
	return v.isSet
}

func (v *NullableOwnerListDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOwnerListDto(val *OwnerListDto) *NullableOwnerListDto {
	return &NullableOwnerListDto{value: val, isSet: true}
}

func (v NullableOwnerListDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOwnerListDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


