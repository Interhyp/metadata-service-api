/*
Metadata

Obtain and manage metadata for owners, services, repositories. Please see [README](https://github.com/Interhyp/metadata-service/blob/main/README.md) for details. **CLIENTS MUST READ!**

API version: v1
Contact: somebody@some-organisation.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the ConditionReferenceDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConditionReferenceDto{}

// ConditionReferenceDto Configuration of conditional build references.
type ConditionReferenceDto struct {
	// Reference of a branch.
	RefMatcher string `json:"refMatcher"`
	// list of users or groups for which this protection does not apply.
	Exemptions []string `json:"exemptions,omitempty"`
	// The expected source for the required conditional build.
	Source *string `json:"source,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ConditionReferenceDto ConditionReferenceDto

// NewConditionReferenceDto instantiates a new ConditionReferenceDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConditionReferenceDto(refMatcher string) *ConditionReferenceDto {
	this := ConditionReferenceDto{}
	this.RefMatcher = refMatcher
	return &this
}

// NewConditionReferenceDtoWithDefaults instantiates a new ConditionReferenceDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionReferenceDtoWithDefaults() *ConditionReferenceDto {
	this := ConditionReferenceDto{}
	return &this
}

// GetRefMatcher returns the RefMatcher field value
func (o *ConditionReferenceDto) GetRefMatcher() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RefMatcher
}

// GetRefMatcherOk returns a tuple with the RefMatcher field value
// and a boolean to check if the value has been set.
func (o *ConditionReferenceDto) GetRefMatcherOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RefMatcher, true
}

// SetRefMatcher sets field value
func (o *ConditionReferenceDto) SetRefMatcher(v string) {
	o.RefMatcher = v
}

// GetExemptions returns the Exemptions field value if set, zero value otherwise.
func (o *ConditionReferenceDto) GetExemptions() []string {
	if o == nil || IsNil(o.Exemptions) {
		var ret []string
		return ret
	}
	return o.Exemptions
}

// GetExemptionsOk returns a tuple with the Exemptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionReferenceDto) GetExemptionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Exemptions) {
		return nil, false
	}
	return o.Exemptions, true
}

// HasExemptions returns a boolean if a field has been set.
func (o *ConditionReferenceDto) HasExemptions() bool {
	if o != nil && !IsNil(o.Exemptions) {
		return true
	}

	return false
}

// SetExemptions gets a reference to the given []string and assigns it to the Exemptions field.
func (o *ConditionReferenceDto) SetExemptions(v []string) {
	o.Exemptions = v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *ConditionReferenceDto) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionReferenceDto) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *ConditionReferenceDto) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *ConditionReferenceDto) SetSource(v string) {
	o.Source = &v
}

func (o ConditionReferenceDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConditionReferenceDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["refMatcher"] = o.RefMatcher
	if !IsNil(o.Exemptions) {
		toSerialize["exemptions"] = o.Exemptions
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ConditionReferenceDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"refMatcher",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConditionReferenceDto := _ConditionReferenceDto{}

	err = json.Unmarshal(data, &varConditionReferenceDto)

	if err != nil {
		return err
	}

	*o = ConditionReferenceDto(varConditionReferenceDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "refMatcher")
		delete(additionalProperties, "exemptions")
		delete(additionalProperties, "source")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableConditionReferenceDto struct {
	value *ConditionReferenceDto
	isSet bool
}

func (v NullableConditionReferenceDto) Get() *ConditionReferenceDto {
	return v.value
}

func (v *NullableConditionReferenceDto) Set(val *ConditionReferenceDto) {
	v.value = val
	v.isSet = true
}

func (v NullableConditionReferenceDto) IsSet() bool {
	return v.isSet
}

func (v *NullableConditionReferenceDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditionReferenceDto(val *ConditionReferenceDto) *NullableConditionReferenceDto {
	return &NullableConditionReferenceDto{value: val, isSet: true}
}

func (v NullableConditionReferenceDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditionReferenceDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


