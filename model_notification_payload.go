/*
Metadata

Obtain and manage metadata for owners, services, repositories. Please see [README](https://github.com/Interhyp/metadata-service/blob/main/README.md) for details. **CLIENTS MUST READ!**

API version: v1
Contact: somebody@some-organisation.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NotificationPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationPayload{}

// NotificationPayload struct for NotificationPayload
type NotificationPayload struct {
	Owner *OwnerDto `json:"Owner,omitempty"`
	Service *ServiceDto `json:"Service,omitempty"`
	Repository *RepositoryDto `json:"Repository,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NotificationPayload NotificationPayload

// NewNotificationPayload instantiates a new NotificationPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationPayload() *NotificationPayload {
	this := NotificationPayload{}
	return &this
}

// NewNotificationPayloadWithDefaults instantiates a new NotificationPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationPayloadWithDefaults() *NotificationPayload {
	this := NotificationPayload{}
	return &this
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *NotificationPayload) GetOwner() OwnerDto {
	if o == nil || IsNil(o.Owner) {
		var ret OwnerDto
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationPayload) GetOwnerOk() (*OwnerDto, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *NotificationPayload) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given OwnerDto and assigns it to the Owner field.
func (o *NotificationPayload) SetOwner(v OwnerDto) {
	o.Owner = &v
}

// GetService returns the Service field value if set, zero value otherwise.
func (o *NotificationPayload) GetService() ServiceDto {
	if o == nil || IsNil(o.Service) {
		var ret ServiceDto
		return ret
	}
	return *o.Service
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationPayload) GetServiceOk() (*ServiceDto, bool) {
	if o == nil || IsNil(o.Service) {
		return nil, false
	}
	return o.Service, true
}

// HasService returns a boolean if a field has been set.
func (o *NotificationPayload) HasService() bool {
	if o != nil && !IsNil(o.Service) {
		return true
	}

	return false
}

// SetService gets a reference to the given ServiceDto and assigns it to the Service field.
func (o *NotificationPayload) SetService(v ServiceDto) {
	o.Service = &v
}

// GetRepository returns the Repository field value if set, zero value otherwise.
func (o *NotificationPayload) GetRepository() RepositoryDto {
	if o == nil || IsNil(o.Repository) {
		var ret RepositoryDto
		return ret
	}
	return *o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationPayload) GetRepositoryOk() (*RepositoryDto, bool) {
	if o == nil || IsNil(o.Repository) {
		return nil, false
	}
	return o.Repository, true
}

// HasRepository returns a boolean if a field has been set.
func (o *NotificationPayload) HasRepository() bool {
	if o != nil && !IsNil(o.Repository) {
		return true
	}

	return false
}

// SetRepository gets a reference to the given RepositoryDto and assigns it to the Repository field.
func (o *NotificationPayload) SetRepository(v RepositoryDto) {
	o.Repository = &v
}

func (o NotificationPayload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Owner) {
		toSerialize["Owner"] = o.Owner
	}
	if !IsNil(o.Service) {
		toSerialize["Service"] = o.Service
	}
	if !IsNil(o.Repository) {
		toSerialize["Repository"] = o.Repository
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NotificationPayload) UnmarshalJSON(data []byte) (err error) {
	varNotificationPayload := _NotificationPayload{}

	err = json.Unmarshal(data, &varNotificationPayload)

	if err != nil {
		return err
	}

	*o = NotificationPayload(varNotificationPayload)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "Owner")
		delete(additionalProperties, "Service")
		delete(additionalProperties, "Repository")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNotificationPayload struct {
	value *NotificationPayload
	isSet bool
}

func (v NullableNotificationPayload) Get() *NotificationPayload {
	return v.value
}

func (v *NullableNotificationPayload) Set(val *NotificationPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationPayload(val *NotificationPayload) *NullableNotificationPayload {
	return &NullableNotificationPayload{value: val, isSet: true}
}

func (v NullableNotificationPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


