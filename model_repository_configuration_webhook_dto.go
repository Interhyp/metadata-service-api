/*
Metadata

Obtain and manage metadata for owners, services, repositories. Please see [README](https://github.com/Interhyp/metadata-service/blob/main/README.md) for details. **CLIENTS MUST READ!**

API version: v1
Contact: somebody@some-organisation.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the RepositoryConfigurationWebhookDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RepositoryConfigurationWebhookDto{}

// RepositoryConfigurationWebhookDto struct for RepositoryConfigurationWebhookDto
type RepositoryConfigurationWebhookDto struct {
	Name string `json:"name"`
	Url string `json:"url"`
	// Events the webhook should be triggered with.
	Events []string `json:"events,omitempty"`
	Configuration map[string]string `json:"configuration,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RepositoryConfigurationWebhookDto RepositoryConfigurationWebhookDto

// NewRepositoryConfigurationWebhookDto instantiates a new RepositoryConfigurationWebhookDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepositoryConfigurationWebhookDto(name string, url string) *RepositoryConfigurationWebhookDto {
	this := RepositoryConfigurationWebhookDto{}
	this.Name = name
	this.Url = url
	return &this
}

// NewRepositoryConfigurationWebhookDtoWithDefaults instantiates a new RepositoryConfigurationWebhookDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepositoryConfigurationWebhookDtoWithDefaults() *RepositoryConfigurationWebhookDto {
	this := RepositoryConfigurationWebhookDto{}
	return &this
}

// GetName returns the Name field value
func (o *RepositoryConfigurationWebhookDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RepositoryConfigurationWebhookDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RepositoryConfigurationWebhookDto) SetName(v string) {
	o.Name = v
}

// GetUrl returns the Url field value
func (o *RepositoryConfigurationWebhookDto) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *RepositoryConfigurationWebhookDto) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *RepositoryConfigurationWebhookDto) SetUrl(v string) {
	o.Url = v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *RepositoryConfigurationWebhookDto) GetEvents() []string {
	if o == nil || IsNil(o.Events) {
		var ret []string
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryConfigurationWebhookDto) GetEventsOk() ([]string, bool) {
	if o == nil || IsNil(o.Events) {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *RepositoryConfigurationWebhookDto) HasEvents() bool {
	if o != nil && !IsNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []string and assigns it to the Events field.
func (o *RepositoryConfigurationWebhookDto) SetEvents(v []string) {
	o.Events = v
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise.
func (o *RepositoryConfigurationWebhookDto) GetConfiguration() map[string]string {
	if o == nil || IsNil(o.Configuration) {
		var ret map[string]string
		return ret
	}
	return o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryConfigurationWebhookDto) GetConfigurationOk() (map[string]string, bool) {
	if o == nil || IsNil(o.Configuration) {
		return map[string]string{}, false
	}
	return o.Configuration, true
}

// HasConfiguration returns a boolean if a field has been set.
func (o *RepositoryConfigurationWebhookDto) HasConfiguration() bool {
	if o != nil && !IsNil(o.Configuration) {
		return true
	}

	return false
}

// SetConfiguration gets a reference to the given map[string]string and assigns it to the Configuration field.
func (o *RepositoryConfigurationWebhookDto) SetConfiguration(v map[string]string) {
	o.Configuration = v
}

func (o RepositoryConfigurationWebhookDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RepositoryConfigurationWebhookDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["url"] = o.Url
	if !IsNil(o.Events) {
		toSerialize["events"] = o.Events
	}
	if !IsNil(o.Configuration) {
		toSerialize["configuration"] = o.Configuration
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RepositoryConfigurationWebhookDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRepositoryConfigurationWebhookDto := _RepositoryConfigurationWebhookDto{}

	err = json.Unmarshal(data, &varRepositoryConfigurationWebhookDto)

	if err != nil {
		return err
	}

	*o = RepositoryConfigurationWebhookDto(varRepositoryConfigurationWebhookDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "url")
		delete(additionalProperties, "events")
		delete(additionalProperties, "configuration")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRepositoryConfigurationWebhookDto struct {
	value *RepositoryConfigurationWebhookDto
	isSet bool
}

func (v NullableRepositoryConfigurationWebhookDto) Get() *RepositoryConfigurationWebhookDto {
	return v.value
}

func (v *NullableRepositoryConfigurationWebhookDto) Set(val *RepositoryConfigurationWebhookDto) {
	v.value = val
	v.isSet = true
}

func (v NullableRepositoryConfigurationWebhookDto) IsSet() bool {
	return v.isSet
}

func (v *NullableRepositoryConfigurationWebhookDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepositoryConfigurationWebhookDto(val *RepositoryConfigurationWebhookDto) *NullableRepositoryConfigurationWebhookDto {
	return &NullableRepositoryConfigurationWebhookDto{value: val, isSet: true}
}

func (v NullableRepositoryConfigurationWebhookDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepositoryConfigurationWebhookDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


