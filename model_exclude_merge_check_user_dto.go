/*
Metadata

Obtain and manage metadata for owners, services, repositories. Please see [README](https://github.com/Interhyp/metadata-service/blob/main/README.md) for details. **CLIENTS MUST READ!**

API version: v1
Contact: somebody@some-organisation.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the ExcludeMergeCheckUserDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExcludeMergeCheckUserDto{}

// ExcludeMergeCheckUserDto struct for ExcludeMergeCheckUserDto
type ExcludeMergeCheckUserDto struct {
	// Name of merge check exclude user
	Name string `json:"name"`
	AdditionalProperties map[string]interface{}
}

type _ExcludeMergeCheckUserDto ExcludeMergeCheckUserDto

// NewExcludeMergeCheckUserDto instantiates a new ExcludeMergeCheckUserDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExcludeMergeCheckUserDto(name string) *ExcludeMergeCheckUserDto {
	this := ExcludeMergeCheckUserDto{}
	this.Name = name
	return &this
}

// NewExcludeMergeCheckUserDtoWithDefaults instantiates a new ExcludeMergeCheckUserDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExcludeMergeCheckUserDtoWithDefaults() *ExcludeMergeCheckUserDto {
	this := ExcludeMergeCheckUserDto{}
	return &this
}

// GetName returns the Name field value
func (o *ExcludeMergeCheckUserDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ExcludeMergeCheckUserDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ExcludeMergeCheckUserDto) SetName(v string) {
	o.Name = v
}

func (o ExcludeMergeCheckUserDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExcludeMergeCheckUserDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ExcludeMergeCheckUserDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExcludeMergeCheckUserDto := _ExcludeMergeCheckUserDto{}

	err = json.Unmarshal(data, &varExcludeMergeCheckUserDto)

	if err != nil {
		return err
	}

	*o = ExcludeMergeCheckUserDto(varExcludeMergeCheckUserDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExcludeMergeCheckUserDto struct {
	value *ExcludeMergeCheckUserDto
	isSet bool
}

func (v NullableExcludeMergeCheckUserDto) Get() *ExcludeMergeCheckUserDto {
	return v.value
}

func (v *NullableExcludeMergeCheckUserDto) Set(val *ExcludeMergeCheckUserDto) {
	v.value = val
	v.isSet = true
}

func (v NullableExcludeMergeCheckUserDto) IsSet() bool {
	return v.isSet
}

func (v *NullableExcludeMergeCheckUserDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExcludeMergeCheckUserDto(val *ExcludeMergeCheckUserDto) *NullableExcludeMergeCheckUserDto {
	return &NullableExcludeMergeCheckUserDto{value: val, isSet: true}
}

func (v NullableExcludeMergeCheckUserDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExcludeMergeCheckUserDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


