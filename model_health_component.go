/*
Metadata

Obtain and manage metadata for owners, services, repositories. Please see [README](https://github.com/Interhyp/metadata-service/blob/main/README.md) for details. **CLIENTS MUST READ!**

API version: v1
Contact: somebody@some-organisation.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the HealthComponent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HealthComponent{}

// HealthComponent struct for HealthComponent
type HealthComponent struct {
	Description *string `json:"description,omitempty"`
	Status *string `json:"status,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HealthComponent HealthComponent

// NewHealthComponent instantiates a new HealthComponent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHealthComponent() *HealthComponent {
	this := HealthComponent{}
	return &this
}

// NewHealthComponentWithDefaults instantiates a new HealthComponent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHealthComponentWithDefaults() *HealthComponent {
	this := HealthComponent{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *HealthComponent) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthComponent) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *HealthComponent) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *HealthComponent) SetDescription(v string) {
	o.Description = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *HealthComponent) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthComponent) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *HealthComponent) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *HealthComponent) SetStatus(v string) {
	o.Status = &v
}

func (o HealthComponent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HealthComponent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HealthComponent) UnmarshalJSON(data []byte) (err error) {
	varHealthComponent := _HealthComponent{}

	err = json.Unmarshal(data, &varHealthComponent)

	if err != nil {
		return err
	}

	*o = HealthComponent(varHealthComponent)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "description")
		delete(additionalProperties, "status")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHealthComponent struct {
	value *HealthComponent
	isSet bool
}

func (v NullableHealthComponent) Get() *HealthComponent {
	return v.value
}

func (v *NullableHealthComponent) Set(val *HealthComponent) {
	v.value = val
	v.isSet = true
}

func (v NullableHealthComponent) IsSet() bool {
	return v.isSet
}

func (v *NullableHealthComponent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHealthComponent(val *HealthComponent) *NullableHealthComponent {
	return &NullableHealthComponent{value: val, isSet: true}
}

func (v NullableHealthComponent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHealthComponent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


