/*
Metadata

Obtain and manage metadata for owners, services, repositories. Please see [README](https://github.com/Interhyp/metadata-service/blob/main/README.md) for details. **CLIENTS MUST READ!**

API version: v1
Contact: somebody@some-organisation.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ServiceSpecDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceSpecDto{}

// ServiceSpecDto struct for ServiceSpecDto
type ServiceSpecDto struct {
	// A reference to the system that the component belongs to
	System *string `json:"system,omitempty"`
	// A relation denoting a dependency on another entity
	DependsOn []string `json:"dependsOn,omitempty"`
	// A relation with an API, provided by this entity
	ProvidesApis []string `json:"providesApis,omitempty"`
	// A relation with an API, consumed by this entity
	ConsumesApis []string `json:"consumesApis,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServiceSpecDto ServiceSpecDto

// NewServiceSpecDto instantiates a new ServiceSpecDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceSpecDto() *ServiceSpecDto {
	this := ServiceSpecDto{}
	return &this
}

// NewServiceSpecDtoWithDefaults instantiates a new ServiceSpecDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceSpecDtoWithDefaults() *ServiceSpecDto {
	this := ServiceSpecDto{}
	return &this
}

// GetSystem returns the System field value if set, zero value otherwise.
func (o *ServiceSpecDto) GetSystem() string {
	if o == nil || IsNil(o.System) {
		var ret string
		return ret
	}
	return *o.System
}

// GetSystemOk returns a tuple with the System field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceSpecDto) GetSystemOk() (*string, bool) {
	if o == nil || IsNil(o.System) {
		return nil, false
	}
	return o.System, true
}

// HasSystem returns a boolean if a field has been set.
func (o *ServiceSpecDto) HasSystem() bool {
	if o != nil && !IsNil(o.System) {
		return true
	}

	return false
}

// SetSystem gets a reference to the given string and assigns it to the System field.
func (o *ServiceSpecDto) SetSystem(v string) {
	o.System = &v
}

// GetDependsOn returns the DependsOn field value if set, zero value otherwise.
func (o *ServiceSpecDto) GetDependsOn() []string {
	if o == nil || IsNil(o.DependsOn) {
		var ret []string
		return ret
	}
	return o.DependsOn
}

// GetDependsOnOk returns a tuple with the DependsOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceSpecDto) GetDependsOnOk() ([]string, bool) {
	if o == nil || IsNil(o.DependsOn) {
		return nil, false
	}
	return o.DependsOn, true
}

// HasDependsOn returns a boolean if a field has been set.
func (o *ServiceSpecDto) HasDependsOn() bool {
	if o != nil && !IsNil(o.DependsOn) {
		return true
	}

	return false
}

// SetDependsOn gets a reference to the given []string and assigns it to the DependsOn field.
func (o *ServiceSpecDto) SetDependsOn(v []string) {
	o.DependsOn = v
}

// GetProvidesApis returns the ProvidesApis field value if set, zero value otherwise.
func (o *ServiceSpecDto) GetProvidesApis() []string {
	if o == nil || IsNil(o.ProvidesApis) {
		var ret []string
		return ret
	}
	return o.ProvidesApis
}

// GetProvidesApisOk returns a tuple with the ProvidesApis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceSpecDto) GetProvidesApisOk() ([]string, bool) {
	if o == nil || IsNil(o.ProvidesApis) {
		return nil, false
	}
	return o.ProvidesApis, true
}

// HasProvidesApis returns a boolean if a field has been set.
func (o *ServiceSpecDto) HasProvidesApis() bool {
	if o != nil && !IsNil(o.ProvidesApis) {
		return true
	}

	return false
}

// SetProvidesApis gets a reference to the given []string and assigns it to the ProvidesApis field.
func (o *ServiceSpecDto) SetProvidesApis(v []string) {
	o.ProvidesApis = v
}

// GetConsumesApis returns the ConsumesApis field value if set, zero value otherwise.
func (o *ServiceSpecDto) GetConsumesApis() []string {
	if o == nil || IsNil(o.ConsumesApis) {
		var ret []string
		return ret
	}
	return o.ConsumesApis
}

// GetConsumesApisOk returns a tuple with the ConsumesApis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceSpecDto) GetConsumesApisOk() ([]string, bool) {
	if o == nil || IsNil(o.ConsumesApis) {
		return nil, false
	}
	return o.ConsumesApis, true
}

// HasConsumesApis returns a boolean if a field has been set.
func (o *ServiceSpecDto) HasConsumesApis() bool {
	if o != nil && !IsNil(o.ConsumesApis) {
		return true
	}

	return false
}

// SetConsumesApis gets a reference to the given []string and assigns it to the ConsumesApis field.
func (o *ServiceSpecDto) SetConsumesApis(v []string) {
	o.ConsumesApis = v
}

func (o ServiceSpecDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceSpecDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.System) {
		toSerialize["system"] = o.System
	}
	if !IsNil(o.DependsOn) {
		toSerialize["dependsOn"] = o.DependsOn
	}
	if !IsNil(o.ProvidesApis) {
		toSerialize["providesApis"] = o.ProvidesApis
	}
	if !IsNil(o.ConsumesApis) {
		toSerialize["consumesApis"] = o.ConsumesApis
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServiceSpecDto) UnmarshalJSON(data []byte) (err error) {
	varServiceSpecDto := _ServiceSpecDto{}

	err = json.Unmarshal(data, &varServiceSpecDto)

	if err != nil {
		return err
	}

	*o = ServiceSpecDto(varServiceSpecDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "system")
		delete(additionalProperties, "dependsOn")
		delete(additionalProperties, "providesApis")
		delete(additionalProperties, "consumesApis")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServiceSpecDto struct {
	value *ServiceSpecDto
	isSet bool
}

func (v NullableServiceSpecDto) Get() *ServiceSpecDto {
	return v.value
}

func (v *NullableServiceSpecDto) Set(val *ServiceSpecDto) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceSpecDto) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceSpecDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceSpecDto(val *ServiceSpecDto) *NullableServiceSpecDto {
	return &NullableServiceSpecDto{value: val, isSet: true}
}

func (v NullableServiceSpecDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceSpecDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


