/*
Metadata

Obtain and manage metadata for owners, services, repositories. Please see [README](https://github.com/Interhyp/metadata-service/blob/main/README.md) for details. **CLIENTS MUST READ!**

API version: v1
Contact: somebody@some-organisation.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the RepositoryDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RepositoryDto{}

// RepositoryDto struct for RepositoryDto
type RepositoryDto struct {
	// The type of the repository as determined by its key.
	Type *string `json:"type,omitempty"`
	// The alias of the repository owner
	Owner string `json:"owner"`
	Description *string `json:"description,omitempty"`
	Url string `json:"url"`
	Mainline string `json:"mainline"`
	// the generator used for the initial contents of this repository
	Generator *string `json:"generator,omitempty"`
	Configuration *RepositoryConfigurationDto `json:"configuration,omitempty"`
	// ISO-8601 UTC date time at which this information was originally committed. When sending an update, include the original timestamp you got so we can detect concurrent updates.
	TimeStamp string `json:"timeStamp"`
	// The git commit hash this information was originally committed under. When sending an update, include the original commitHash you got so we can detect concurrent updates.
	CommitHash string `json:"commitHash"`
	// The jira issue to use for committing a change, or the last jira issue used.
	JiraIssue string `json:"jiraIssue"`
	// A map of arbitrary string labels attached to this repository.
	Labels map[string]string `json:"labels,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RepositoryDto RepositoryDto

// NewRepositoryDto instantiates a new RepositoryDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepositoryDto(owner string, url string, mainline string, timeStamp string, commitHash string, jiraIssue string) *RepositoryDto {
	this := RepositoryDto{}
	this.Owner = owner
	this.Url = url
	this.Mainline = mainline
	this.TimeStamp = timeStamp
	this.CommitHash = commitHash
	this.JiraIssue = jiraIssue
	return &this
}

// NewRepositoryDtoWithDefaults instantiates a new RepositoryDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepositoryDtoWithDefaults() *RepositoryDto {
	this := RepositoryDto{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RepositoryDto) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryDto) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RepositoryDto) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RepositoryDto) SetType(v string) {
	o.Type = &v
}

// GetOwner returns the Owner field value
func (o *RepositoryDto) GetOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *RepositoryDto) GetOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *RepositoryDto) SetOwner(v string) {
	o.Owner = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RepositoryDto) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryDto) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RepositoryDto) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RepositoryDto) SetDescription(v string) {
	o.Description = &v
}

// GetUrl returns the Url field value
func (o *RepositoryDto) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *RepositoryDto) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *RepositoryDto) SetUrl(v string) {
	o.Url = v
}

// GetMainline returns the Mainline field value
func (o *RepositoryDto) GetMainline() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mainline
}

// GetMainlineOk returns a tuple with the Mainline field value
// and a boolean to check if the value has been set.
func (o *RepositoryDto) GetMainlineOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mainline, true
}

// SetMainline sets field value
func (o *RepositoryDto) SetMainline(v string) {
	o.Mainline = v
}

// GetGenerator returns the Generator field value if set, zero value otherwise.
func (o *RepositoryDto) GetGenerator() string {
	if o == nil || IsNil(o.Generator) {
		var ret string
		return ret
	}
	return *o.Generator
}

// GetGeneratorOk returns a tuple with the Generator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryDto) GetGeneratorOk() (*string, bool) {
	if o == nil || IsNil(o.Generator) {
		return nil, false
	}
	return o.Generator, true
}

// HasGenerator returns a boolean if a field has been set.
func (o *RepositoryDto) HasGenerator() bool {
	if o != nil && !IsNil(o.Generator) {
		return true
	}

	return false
}

// SetGenerator gets a reference to the given string and assigns it to the Generator field.
func (o *RepositoryDto) SetGenerator(v string) {
	o.Generator = &v
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise.
func (o *RepositoryDto) GetConfiguration() RepositoryConfigurationDto {
	if o == nil || IsNil(o.Configuration) {
		var ret RepositoryConfigurationDto
		return ret
	}
	return *o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryDto) GetConfigurationOk() (*RepositoryConfigurationDto, bool) {
	if o == nil || IsNil(o.Configuration) {
		return nil, false
	}
	return o.Configuration, true
}

// HasConfiguration returns a boolean if a field has been set.
func (o *RepositoryDto) HasConfiguration() bool {
	if o != nil && !IsNil(o.Configuration) {
		return true
	}

	return false
}

// SetConfiguration gets a reference to the given RepositoryConfigurationDto and assigns it to the Configuration field.
func (o *RepositoryDto) SetConfiguration(v RepositoryConfigurationDto) {
	o.Configuration = &v
}

// GetTimeStamp returns the TimeStamp field value
func (o *RepositoryDto) GetTimeStamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimeStamp
}

// GetTimeStampOk returns a tuple with the TimeStamp field value
// and a boolean to check if the value has been set.
func (o *RepositoryDto) GetTimeStampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeStamp, true
}

// SetTimeStamp sets field value
func (o *RepositoryDto) SetTimeStamp(v string) {
	o.TimeStamp = v
}

// GetCommitHash returns the CommitHash field value
func (o *RepositoryDto) GetCommitHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommitHash
}

// GetCommitHashOk returns a tuple with the CommitHash field value
// and a boolean to check if the value has been set.
func (o *RepositoryDto) GetCommitHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommitHash, true
}

// SetCommitHash sets field value
func (o *RepositoryDto) SetCommitHash(v string) {
	o.CommitHash = v
}

// GetJiraIssue returns the JiraIssue field value
func (o *RepositoryDto) GetJiraIssue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.JiraIssue
}

// GetJiraIssueOk returns a tuple with the JiraIssue field value
// and a boolean to check if the value has been set.
func (o *RepositoryDto) GetJiraIssueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JiraIssue, true
}

// SetJiraIssue sets field value
func (o *RepositoryDto) SetJiraIssue(v string) {
	o.JiraIssue = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *RepositoryDto) GetLabels() map[string]string {
	if o == nil || IsNil(o.Labels) {
		var ret map[string]string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryDto) GetLabelsOk() (map[string]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return map[string]string{}, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *RepositoryDto) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *RepositoryDto) SetLabels(v map[string]string) {
	o.Labels = v
}

func (o RepositoryDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RepositoryDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["owner"] = o.Owner
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["url"] = o.Url
	toSerialize["mainline"] = o.Mainline
	if !IsNil(o.Generator) {
		toSerialize["generator"] = o.Generator
	}
	if !IsNil(o.Configuration) {
		toSerialize["configuration"] = o.Configuration
	}
	toSerialize["timeStamp"] = o.TimeStamp
	toSerialize["commitHash"] = o.CommitHash
	toSerialize["jiraIssue"] = o.JiraIssue
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RepositoryDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"owner",
		"url",
		"mainline",
		"timeStamp",
		"commitHash",
		"jiraIssue",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRepositoryDto := _RepositoryDto{}

	err = json.Unmarshal(data, &varRepositoryDto)

	if err != nil {
		return err
	}

	*o = RepositoryDto(varRepositoryDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "owner")
		delete(additionalProperties, "description")
		delete(additionalProperties, "url")
		delete(additionalProperties, "mainline")
		delete(additionalProperties, "generator")
		delete(additionalProperties, "configuration")
		delete(additionalProperties, "timeStamp")
		delete(additionalProperties, "commitHash")
		delete(additionalProperties, "jiraIssue")
		delete(additionalProperties, "labels")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRepositoryDto struct {
	value *RepositoryDto
	isSet bool
}

func (v NullableRepositoryDto) Get() *RepositoryDto {
	return v.value
}

func (v *NullableRepositoryDto) Set(val *RepositoryDto) {
	v.value = val
	v.isSet = true
}

func (v NullableRepositoryDto) IsSet() bool {
	return v.isSet
}

func (v *NullableRepositoryDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepositoryDto(val *RepositoryDto) *NullableRepositoryDto {
	return &NullableRepositoryDto{value: val, isSet: true}
}

func (v NullableRepositoryDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepositoryDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


